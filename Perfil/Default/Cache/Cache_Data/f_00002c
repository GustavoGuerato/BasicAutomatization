{"version":3,"file":"ui_packages_soft-nav_soft-nav_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/aria-live/aria-live.ts","ui/packages/client-env/client-env.ts","ui/packages/document-ready/document-ready.ts","ui/packages/feature-flags/feature-flags.ts","ui/packages/runtime-environment/runtime-environment.ts","ui/packages/safe-storage/safe-storage.ts","ui/packages/safe-storage/session-storage.ts","ui/packages/soft-nav/events.ts","ui/packages/soft-nav/stats.ts","ui/packages/soft-nav/state.ts","ui/packages/soft-nav/utils.ts","ui/packages/soft-nav/external.ts","ui/packages/soft-nav/setup.ts","ui/packages/soft-nav/navigator.ts","ui/packages/ssr-utils/ssr-globals.ts","ui/packages/ssr-utils/ssr.ts","ui/packages/stats/stats.ts"],"sourcesContent":["import {ssrSafeDocument} from '@github-ui/ssr-utils'\n\n// Announce an element's text to the screen reader.\nexport function announceFromElement(el: HTMLElement, options?: {assertive?: boolean}) {\n  announce(getTextContent(el), options)\n}\n\n// Announce message update to screen reader.\nexport function announce(message: string, options?: {assertive?: boolean}) {\n  const {assertive} = options ?? {}\n\n  setContainerContent(message, assertive)\n}\n\n// Set aria-live container to message.\nfunction setContainerContent(message: string, assertive?: boolean) {\n  const container = ssrSafeDocument?.querySelector(\n    assertive ? '#js-global-screen-reader-notice-assertive' : '#js-global-screen-reader-notice',\n  )\n  if (!container) return\n  if (container.textContent === message) {\n    /* This is a hack due to the way the aria live API works.\n    A screen reader will not read a live region again\n    if the text is the same. Adding a space character tells\n    the browser that the live region has updated,\n    which will cause it to read again, but with no audible difference. */\n    container.textContent = `${message}\\u00A0`\n  } else {\n    container.textContent = message\n  }\n}\n\n// Gets the trimmed text content of an element.\nfunction getTextContent(el: HTMLElement): string {\n  // innerText does not contain hidden text\n  /* eslint-disable-next-line github/no-innerText */\n  return (el.getAttribute('aria-label') || el.innerText || '').trim()\n}\n","export interface ClientEnvironment {\n  readonly locale: string\n  readonly featureFlags: string[]\n}\n\nlet env: ClientEnvironment | undefined\n\nexport function getEnv() {\n  if (!env) {\n    throw new Error(\n      'Client env was requested before it was loaded. This likely means you are attempting to use client env at the module level in SSR, which is not supported. Please move your client env usage into a function.',\n    )\n  }\n\n  return env\n}\n\nexport function getLocale() {\n  return env?.locale ?? 'en-US'\n}\n\nfunction loadEnv() {\n  if (typeof document !== 'undefined') {\n    const envTag = document.getElementById('client-env')\n    if (envTag) {\n      try {\n        env = JSON.parse(envTag.textContent || '')\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error parsing client-env', error)\n      }\n    }\n  }\n}\n\n// Automatically load the env on initial page load\nloadEnv()\n\n// This is a special helper method for setting the env in the SSR environment only\nexport function setClientEnvForSsr(clientEnv: ClientEnvironment | undefined) {\n  env = clientEnv\n}\n\n// This env object is used as a default for tests only and is not included in production builds\nexport const clientEnvForTests: ClientEnvironment = {\n  locale: 'en',\n  featureFlags: ['test_flag'],\n}\n\nexport function _resetForTests({loadNewEnv, forceUndefined}: {loadNewEnv: boolean; forceUndefined?: boolean}) {\n  // forget the current env\n  env = forceUndefined ? undefined : clientEnvForTests\n\n  if (loadNewEnv) {\n    // load the latest env\n    loadEnv()\n  }\n}\n","import {ssrSafeDocument, ssrSafeWindow} from '@github-ui/ssr-utils'\n\n// Check if document has passed interactive state.\n//\n// The document has finished loading and the document has been parsed but\n// sub-resources such as images, stylesheets and frames are still loading.\n// The state indicates that the DOMContentLoaded event has been fired.\nexport const ready: Promise<void> = (function () {\n  if (ssrSafeDocument?.readyState === 'interactive' || ssrSafeDocument?.readyState === 'complete') {\n    return Promise.resolve()\n  } else {\n    return new Promise<void>(resolve => {\n      ssrSafeDocument?.addEventListener('DOMContentLoaded', () => {\n        resolve()\n      })\n    })\n  }\n})()\n\n// Check if document has passed loaded state.\n//\n// The document and all sub-resources have finished loading. The state\n// indicates that the load event has been fired.\nexport const loaded: Promise<unknown> = (function () {\n  if (ssrSafeDocument?.readyState === 'complete') {\n    return Promise.resolve()\n  } else {\n    return new Promise(resolve => {\n      ssrSafeWindow?.addEventListener('load', resolve)\n    })\n  }\n})()\n","import memoize from '@github/memoize'\nimport {getEnv} from '@github-ui/client-env'\nimport {IS_SERVER} from '@github-ui/ssr-utils'\n\nfunction getEnabledFeaturesSet(): Set<string> {\n  const features = getEnv().featureFlags\n  const featuresUpperCase = features.map(feature => feature.toUpperCase())\n  return new Set<string>(featuresUpperCase)\n}\n\nconst featuresSet = IS_SERVER ? getEnabledFeaturesSet : memoize(getEnabledFeaturesSet)\n\nexport function isFeatureEnabled(name: string): boolean {\n  return featuresSet().has(name.toUpperCase())\n}\n\n//exported to allow mocking in tests\nconst featureFlag = {isFeatureEnabled}\n\nexport {featureFlag}\n","import memoize from '@github/memoize'\nimport {ssrSafeDocument} from '@github-ui/ssr-utils'\n\nconst runtimeEnvironment = memoize(githubEnvironment)\n\n// return the github instance environment\n// if dotcom, returns 'dotcom'\n// if enterprise, returns 'enterprise' (ghes and ghae both)\nfunction githubEnvironment(): string {\n  return ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"runtime-environment\"]')?.content || ''\n}\n\nexport const isPrivateInstance = memoize(isGitHubPrivateInstance)\nfunction isGitHubPrivateInstance(): boolean {\n  return ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"is-private-instance\"]')?.content === 'true'\n}\n\nexport const isEnterprise = memoize(isEnterpriseEnvironment)\nfunction isEnterpriseEnvironment(): boolean {\n  return runtimeEnvironment() === 'enterprise'\n}\n\n// This is the \"bundler\" that built the client-side assets, e.g. \"webpack\"\nexport const bundler = typeof BUNDLER !== 'undefined' ? BUNDLER : undefined\n","import {ssrSafeWindow} from '@github-ui/ssr-utils'\nimport {sendStats} from '@github-ui/stats'\n\ntype StorageBackend = 'sessionStorage' | 'localStorage'\n\n/**\n * An implementation of the Storage API that throws away all data.  Used in\n * cases when the requested Storage backend is not available.\n */\nclass NoOpStorage {\n  getItem() {\n    return null\n  }\n\n  setItem() {\n    return undefined\n  }\n\n  removeItem() {\n    return undefined\n  }\n\n  clear() {\n    return undefined\n  }\n\n  key() {\n    return null\n  }\n\n  get length() {\n    return 0\n  }\n}\n\ntype SafeStorageOptions = {\n  /** Callers may opt not to suppress quota errors thrown on set in case they rely on recieving them. */\n  throwQuotaErrorsOnSet: boolean\n  /** The amount of time the value should remain in storage, in milliseconds */\n  ttl?: number\n  /** Don't send stats in CI */\n  sendCacheStats?: boolean\n}\n\n/**\n * Safely access Storage items by wrapping a Storage instance\n * (localStorage or sessionStorage) with safe versions of its API\n * methods.  Callers may opt not to suppress quota errors thrown on\n * set in case they rely on recieving them.\n */\nexport default function safeStorage<T = string>(\n  storageKey: StorageBackend,\n  options: SafeStorageOptions = {throwQuotaErrorsOnSet: false},\n  global = ssrSafeWindow,\n  deserialize: (value: string) => T = value => value as unknown as T,\n  serialize: (value: T) => string = (value: T) => value as unknown as string,\n) {\n  let storage: Storage\n  try {\n    if (!global) {\n      // in an SSR environment, use noop storage\n      throw new Error()\n    }\n\n    storage = global[storageKey] || new NoOpStorage()\n  } catch {\n    storage = new NoOpStorage()\n  }\n\n  const {throwQuotaErrorsOnSet} = options\n\n  function emitStats(key: PlatformBrowserIncrementKey) {\n    if (options.sendCacheStats) {\n      sendStats({incrementKey: key})\n    }\n  }\n\n  /**  Safely get storage item. Returns `null` if the item is older than the provided ttl */\n  function getItem(key: string, now: number = new Date().getTime()): T | null {\n    try {\n      const value = storage.getItem(key)\n      if (!value) {\n        return null\n      }\n      const expiryKey = `${key}:expiry`\n      const expiry = Number(storage.getItem(expiryKey))\n      if (expiry && now > expiry) {\n        removeItem(key)\n        removeItem(expiryKey)\n        emitStats('SAFE_STORAGE_VALUE_EXPIRED')\n        return null\n      } else {\n        emitStats('SAFE_STORAGE_VALUE_WITHIN_TTL')\n        return deserialize(value)\n      }\n    } catch (error) {\n      // Ignore browser private mode error.\n      return null\n    }\n  }\n\n  /**\n   * Safely set storage item.\n   * If `ttl` is provided, set an expiry time for the item under the key `${key}:expiry`\n   * This function will be called\n   */\n  function setItem(key: string, value: T, now: number = new Date().getTime()) {\n    try {\n      storage.setItem(key, serialize(value) as unknown as string)\n      if (options.ttl) {\n        const expiryKey = `${key}:expiry`\n        const expiry = now + options.ttl\n        storage.setItem(expiryKey, expiry.toString())\n      }\n    } catch (error) {\n      if (throwQuotaErrorsOnSet && error instanceof Error && error.message.toLowerCase().includes('quota')) throw error\n    }\n  }\n\n  // Safely remove storage item.\n  function removeItem(key: string) {\n    try {\n      storage.removeItem(key)\n      if (options.ttl) {\n        const expiryKey = `${key}:expiry`\n        storage.removeItem(expiryKey)\n      }\n    } catch (error) {\n      // Ignore browser private mode error.\n    }\n  }\n\n  return {\n    getItem,\n    setItem,\n    removeItem,\n    clear: storage.clear,\n    key: storage.key,\n    get length() {\n      return storage.length\n    },\n  }\n}\n\nexport function jsonSafeStorage<T>(storageBackend: StorageBackend) {\n  return safeStorage<T>(\n    storageBackend,\n    {throwQuotaErrorsOnSet: false},\n    window,\n    JSON.parse as (value: string) => T,\n    JSON.stringify as (obj: T) => string,\n  )\n}\n","import safeStorage from './safe-storage'\n\nexport const {getItem, setItem, removeItem} = safeStorage('sessionStorage')\n","import {SOFT_NAV_STATE} from './state'\n\nexport type SoftNavMechanism = 'turbo' | 'react' | 'turbo.frame'\n\nclass SoftNavEvent extends Event {\n  mechanism: SoftNavMechanism\n\n  constructor(mechanism: SoftNavMechanism, type: string) {\n    super(type)\n    this.mechanism = mechanism\n  }\n}\n\nexport class SoftNavStartEvent extends SoftNavEvent {\n  constructor(mechanism: SoftNavMechanism) {\n    super(mechanism, SOFT_NAV_STATE.START)\n  }\n}\n\nexport class SoftNavSuccessEvent extends SoftNavEvent {\n  visitCount: number\n\n  constructor(mechanism: SoftNavMechanism, visitCount: number) {\n    super(mechanism, SOFT_NAV_STATE.SUCCESS)\n    this.visitCount = visitCount\n  }\n}\n\nexport class SoftNavErrorEvent extends SoftNavEvent {\n  error: string\n\n  constructor(mechanism: SoftNavMechanism, error: string) {\n    super(mechanism, SOFT_NAV_STATE.ERROR)\n    this.error = error\n  }\n}\n\nexport class SoftNavEndEvent extends SoftNavEvent {\n  constructor(mechanism: SoftNavMechanism) {\n    super(mechanism, SOFT_NAV_STATE.END)\n  }\n}\n","import {sendStats} from '@github-ui/stats'\nimport {getCurrentReactAppName, getSoftNavMechanism, getSoftNavReactAppName, getSoftNavReferrer} from './utils'\nimport type {SoftNavMechanism} from './events'\n\nexport const SOFT_NAV_DURATION_MARK = 'stats:soft-nav-duration'\nexport const MECHANISM_MAPPING: Record<SoftNavMechanism | 'ui' | 'hard', PlatformBrowserSoftNavigationMechanism> = {\n  turbo: 'TURBO',\n  react: 'REACT',\n  'turbo.frame': 'FRAME',\n  ui: 'UI',\n  hard: 'HARD',\n}\nexport function markStart() {\n  // browswers only record the first ~150 resources\n  // clearing it here provides room to track additional resources loaded during the soft-nav\n  performance.clearResourceTimings()\n  performance.mark(SOFT_NAV_DURATION_MARK)\n}\n\nfunction getDurationSinceLastSoftNav() {\n  if (performance.getEntriesByName(SOFT_NAV_DURATION_MARK).length === 0) {\n    return null\n  }\n\n  performance.measure(SOFT_NAV_DURATION_MARK, SOFT_NAV_DURATION_MARK)\n  const measures = performance.getEntriesByName(SOFT_NAV_DURATION_MARK)\n  const measure = measures.pop()\n  return measure ? measure.duration : null\n}\n\nexport function sendFailureStats(turboFailureReason: string) {\n  sendStats({\n    turboFailureReason,\n    turboStartUrl: getSoftNavReferrer(),\n    turboEndUrl: window.location.href,\n  })\n}\n\nexport function sendRenderStats() {\n  const duration = getDurationSinceLastSoftNav()\n\n  if (!duration) return\n\n  const mechanism = MECHANISM_MAPPING[getSoftNavMechanism()]\n  const roundedDuration = Math.round(duration)\n\n  if (mechanism === MECHANISM_MAPPING.react)\n    document.dispatchEvent(new CustomEvent('staffbar-update', {detail: {duration: roundedDuration}}))\n\n  sendStats({\n    requestUrl: window.location.href,\n    softNavigationTiming: {\n      mechanism,\n      destination: getCurrentReactAppName() || 'rails',\n      duration: roundedDuration,\n      initiator: getSoftNavReactAppName() || 'rails',\n    },\n  })\n}\n","import {\n  SoftNavEndEvent,\n  SoftNavErrorEvent,\n  type SoftNavMechanism,\n  SoftNavStartEvent,\n  SoftNavSuccessEvent,\n} from './events'\nimport {markStart, sendFailureStats, sendRenderStats} from './stats'\nimport {\n  clearSoftNav,\n  getSoftNavFailReason,\n  getSoftNavMechanism,\n  setSoftNavMechanism,\n  unsetSoftNav,\n  setSoftNavReferrer,\n  setSoftNavReactAppName,\n  inSoftNav,\n  getCurrentReactAppName,\n} from './utils'\n\nexport const SOFT_NAV_STATE = Object.freeze({\n  INITIAL: 'soft-nav:initial',\n  START: 'soft-nav:start',\n  SUCCESS: 'soft-nav:success',\n  ERROR: 'soft-nav:error',\n  FRAME_UPDATE: 'soft-nav:frame-update',\n  END: 'soft-nav:end',\n  RENDER: 'soft-nav:render',\n  PROGRESS_BAR: {\n    START: 'soft-nav:progress-bar:start',\n    END: 'soft-nav:progress-bar:end',\n  },\n})\n\ninterface SoftNavOptions {\n  skipIfGoingToReactApp?: boolean\n  allowedMechanisms?: SoftNavMechanism[]\n}\n\nexport const DEFAULT_SOFT_NAV_ERROR_REASON = 'reload'\nlet visitCount = 0\n\nexport function initSoftNav() {\n  visitCount = 0\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.INITIAL))\n\n  clearSoftNav()\n}\n\nexport function startSoftNav(mechanism: SoftNavMechanism) {\n  if (inSoftNav()) return\n\n  startProgressBar()\n  document.dispatchEvent(new SoftNavStartEvent(mechanism))\n\n  setSoftNavMechanism(mechanism)\n  setSoftNavReactAppName()\n  setSoftNavReferrer()\n  markStart()\n}\n\nexport function succeedSoftNav(options: SoftNavOptions = {}) {\n  if (!canTriggerEvent(options)) return\n\n  visitCount += 1\n\n  document.dispatchEvent(new SoftNavSuccessEvent(getSoftNavMechanism(), visitCount))\n  endSoftNav(options)\n}\n\nexport function failSoftNav(options: SoftNavOptions = {}) {\n  if (!canTriggerEvent(options)) return\n\n  visitCount = 0\n  const reason = getSoftNavFailReason() || DEFAULT_SOFT_NAV_ERROR_REASON\n  document.dispatchEvent(new SoftNavErrorEvent(getSoftNavMechanism(), reason))\n\n  endProgressBar()\n  sendFailureStats(reason)\n  clearSoftNav()\n}\n\nexport function endSoftNav(options: SoftNavOptions = {}) {\n  if (!canTriggerEvent(options)) return\n\n  endProgressBar()\n  document.dispatchEvent(new SoftNavEndEvent(getSoftNavMechanism()))\n\n  unsetSoftNav()\n}\n\nexport function renderedSoftNav(options: SoftNavOptions = {}) {\n  if (!canTriggerEvent(options)) return\n\n  sendRenderStats()\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.RENDER))\n}\n\nexport function updateFrame() {\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.FRAME_UPDATE))\n}\n\nfunction startProgressBar() {\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.PROGRESS_BAR.START))\n}\n\nfunction endProgressBar() {\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.PROGRESS_BAR.END))\n}\n\nfunction canTriggerEvent({skipIfGoingToReactApp, allowedMechanisms = []}: SoftNavOptions = {}) {\n  return (\n    inSoftNav() &&\n    (allowedMechanisms.length === 0 || allowedMechanisms.includes(getSoftNavMechanism())) &&\n    (!skipIfGoingToReactApp || !getCurrentReactAppName())\n  )\n}\n","import {getItem, removeItem, setItem} from '@github-ui/safe-storage/session-storage'\nimport type {SoftNavMechanism} from './events'\nimport {DEFAULT_SOFT_NAV_ERROR_REASON} from './state'\n\nexport const SOFT_NAV_FAIL = 'soft-nav:fail'\nexport const SOFT_NAV_FAIL_REFERRER = 'soft-nav:fail-referrer'\nexport const SOFT_NAV_REFERRER = 'soft-nav:referrer'\nexport const SOFT_NAV_MARK = 'soft-nav:marker'\nexport const SOFT_NAV_REACT_APP_NAME = 'soft-nav:react-app-name'\n\nexport function clearSoftNav() {\n  setItem(SOFT_NAV_MARK, '0')\n  removeItem(SOFT_NAV_REFERRER)\n  removeItem(SOFT_NAV_FAIL)\n  removeItem(SOFT_NAV_FAIL_REFERRER)\n  removeItem(SOFT_NAV_REACT_APP_NAME)\n}\n\nexport function setSoftNavMechanism(mechanism: SoftNavMechanism) {\n  setItem(SOFT_NAV_MARK, mechanism)\n}\n\nexport function unsetSoftNav() {\n  setItem(SOFT_NAV_MARK, '0')\n}\n\nexport function inSoftNav() {\n  const softNav = getItem(SOFT_NAV_MARK)\n  return softNav && softNav !== '0'\n}\n\nexport function getSoftNavMechanism(): SoftNavMechanism {\n  return getItem(SOFT_NAV_MARK) as SoftNavMechanism\n}\n\nexport function hasSoftNavFailure() {\n  return Boolean(getSoftNavFailReason())\n}\n\nexport function getSoftNavFailReason() {\n  return getItem(SOFT_NAV_FAIL)\n}\n\nexport function setSoftNavFailReason(reason: string) {\n  setItem(SOFT_NAV_FAIL, reason || DEFAULT_SOFT_NAV_ERROR_REASON)\n  setItem(SOFT_NAV_FAIL_REFERRER, window.location.href)\n}\n\nexport function setSoftNavReferrer() {\n  setItem(SOFT_NAV_REFERRER, window.location.href)\n}\n\nexport function getSoftNavReferrer() {\n  return getItem(SOFT_NAV_REFERRER) || document.referrer\n}\n\nexport function setSoftNavReactAppName() {\n  const appName = getCurrentReactAppName()\n\n  if (appName) {\n    setItem(SOFT_NAV_REACT_APP_NAME, appName)\n  } else {\n    removeItem(SOFT_NAV_REACT_APP_NAME)\n  }\n}\n\nexport function getSoftNavReactAppName() {\n  return getItem(SOFT_NAV_REACT_APP_NAME)\n}\n\nexport function getCurrentReactAppName() {\n  if (document.querySelector('meta[name=\"ui\"]')) return 'ui'\n\n  return document.querySelector('react-app')?.getAttribute('app-name')\n}\n","export const SOFT_NAV_EXTERNAL_EVENTS = Object.freeze({\n  INITIAL: 'soft-nav:external:initial',\n  START: 'soft-nav:external:start',\n  SUCCESS: 'soft-nav:external:success',\n  ERROR: 'soft-nav:external:error',\n  RENDER: 'soft-nav:external:render',\n})\n","import {announce} from '@github-ui/aria-live'\nimport {ssrSafeDocument} from '@github-ui/ssr-utils'\nimport {SOFT_NAV_EXTERNAL_EVENTS} from './external'\nimport {SOFT_NAV_STATE, failSoftNav, initSoftNav, renderedSoftNav, startSoftNav, succeedSoftNav} from './state'\n\nexport function setup() {\n  /** Ensure that when a turbo drive navigation happens, the page title is announced */\n  ssrSafeDocument?.addEventListener(SOFT_NAV_STATE.SUCCESS, function (event) {\n    if (event.mechanism === 'turbo') {\n      announce(`${document.title}`)\n    }\n  })\n\n  ssrSafeDocument?.addEventListener(SOFT_NAV_EXTERNAL_EVENTS.INITIAL, initSoftNav)\n\n  ssrSafeDocument?.addEventListener(SOFT_NAV_EXTERNAL_EVENTS.START, e => {\n    startSoftNav((e as CustomEvent).detail.mechanism)\n  })\n\n  ssrSafeDocument?.addEventListener(SOFT_NAV_EXTERNAL_EVENTS.SUCCESS, () => succeedSoftNav())\n  ssrSafeDocument?.addEventListener(SOFT_NAV_EXTERNAL_EVENTS.ERROR, () => failSoftNav())\n  ssrSafeDocument?.addEventListener(SOFT_NAV_EXTERNAL_EVENTS.RENDER, () => renderedSoftNav())\n}\n","import {SOFT_NAV_STATE} from './state'\n\nexport function interceptNavigationUI() {\n  if (typeof navigation === 'undefined') return\n  if (typeof NavigateEvent === 'undefined') return\n  if (typeof NavigateEvent.prototype?.intercept !== 'function') return\n\n  document.addEventListener(SOFT_NAV_STATE.PROGRESS_BAR.START, () => {\n    const finished = new Promise(resolve => {\n      document.addEventListener(SOFT_NAV_STATE.PROGRESS_BAR.END, resolve, {once: true})\n    })\n    navigation.addEventListener(\n      'navigate',\n      e => {\n        if (e.canIntercept) {\n          e.intercept({\n            scroll: 'manual',\n            handler: () => {\n              history.replaceState(navigation.currentEntry.getState(), '', location.href)\n              return finished\n            },\n          })\n        }\n      },\n      {once: true},\n    )\n    navigation.navigate(location.href, {\n      history: 'replace',\n      state: history.state,\n    })\n  })\n}\n","// When using SSR, browser globals are not available. If you try to use them, Node.js will throw an error\ntype SSRSafeLocation = Pick<Location, 'pathname' | 'origin' | 'search' | 'hash'>\n\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeDocument = typeof document === 'undefined' ? undefined : document\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeWindow = typeof window === 'undefined' ? undefined : window\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeHistory = typeof history === 'undefined' ? undefined : history\n\nexport const ssrSafeLocation: SSRSafeLocation =\n  // eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\n  typeof location === 'undefined' ? {pathname: '', origin: '', search: '', hash: ''} : location\n\nexport function setLocation(url: string) {\n  // eslint-disable-next-line no-restricted-syntax\n  const parsedURL: SSRSafeLocation = new URL(url)\n  const {pathname, origin, search, hash} = parsedURL\n\n  Object.assign(ssrSafeLocation, {pathname, origin, search, hash})\n}\n","import {ssrSafeDocument} from './ssr-globals'\n\n/***\n * Are we rendering on the server?\n */\nexport const IS_SERVER = typeof ssrSafeDocument === 'undefined'\n\n/***\n * Are we rendering on the client?\n */\nexport const IS_BROWSER = !IS_SERVER\n\n/***\n * This helper returns `true` if:\n * - we are rendering on the server\n * - we are on the client, and the app has been hydrated from a server-render\n */\nexport function wasServerRendered() {\n  if (IS_SERVER) {\n    return true\n  }\n\n  return Boolean(ssrSafeDocument!.querySelector('react-app[data-ssr=\"true\"]'))\n}\n","import {ssrSafeDocument} from '@github-ui/ssr-utils'\nimport {loaded} from '@github-ui/document-ready'\nimport {bundler} from '@github-ui/runtime-environment'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\n\nlet stats: PlatformBrowserStat[] = []\nconst chunkSize = 64 * 1024\n\nexport function sendStats(stat: PlatformBrowserStat, flushImmediately = false, samplingProbability = 1.0): void {\n  if (isFeatureEnabled('BROWSER_STATS_DISABLED') === true) {\n    return\n  }\n  if (samplingProbability < 0 || samplingProbability > 1) {\n    throw new RangeError('Sampling probability must be between 0 and 1')\n  }\n\n  if (stat.timestamp === undefined) stat.timestamp = new Date().getTime()\n  stat.loggedIn = isLoggedIn()\n  stat.staff = isStaff()\n  stat.bundler = bundler\n  if (Math.random() < samplingProbability) {\n    stats.push(stat)\n  }\n\n  if (flushImmediately) {\n    flushStats()\n  } else {\n    scheduleSendStats()\n  }\n}\n\nlet queued: number | null = null\n\nasync function scheduleSendStats() {\n  await loaded\n  if (queued == null) {\n    queued = window.requestIdleCallback(flushStats)\n  }\n}\n\nfunction flushStats() {\n  queued = null\n  if (!stats.length) {\n    return\n  }\n\n  const url = ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"browser-stats-url\"]')?.content\n  if (!url) {\n    return\n  }\n\n  const batches = getBatches(stats)\n\n  for (const batch of batches) {\n    safeSend(url, `{\"stats\": [${batch.join(',')}] }`)\n  }\n\n  stats = []\n}\n\n// getBatches breaks up the list of stats into smaller batches\n// that are less than 64kb in size. This is to avoid hitting the\n// size limit of the beacon API.\nfunction getBatches(items: PlatformBrowserStat[]): string[][] {\n  const batches: string[][] = []\n  const itemStrings = items.map(item => JSON.stringify(item))\n\n  while (itemStrings.length > 0) {\n    batches.push(makeBatch(itemStrings))\n  }\n\n  return batches\n}\n\n// makeBatch walks the items and collects batches of items that are within\n// the 64kb limit. If an item is too big to fit in a batch, it is sent alone.\nfunction makeBatch(itemStrings: string[]): string[] {\n  const firstItem = itemStrings.shift()!\n  const batch: string[] = [firstItem]\n  let size = firstItem.length\n\n  while (itemStrings.length > 0 && size <= chunkSize) {\n    const nextItemSize = itemStrings[0]!.length\n\n    if (size + nextItemSize <= chunkSize) {\n      const itemString = itemStrings.shift()!\n      batch.push(itemString)\n      size += nextItemSize\n    } else {\n      break\n    }\n  }\n\n  return batch\n}\n\nfunction safeSend(url: string, data: string) {\n  try {\n    if (navigator.sendBeacon) {\n      navigator.sendBeacon(url, data)\n    }\n  } catch {\n    // Silently ignore errors: https://github.com/github/github/issues/178088#issuecomment-829936461\n  }\n}\n\nfunction isLoggedIn(): boolean {\n  return !!ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"user-login\"]')?.content\n}\n\nexport function isStaff(): boolean {\n  return !!ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"user-staff\"]')?.content\n}\n\n// Flush stats before users navigate away from the page\nssrSafeDocument?.addEventListener('pagehide', flushStats)\nssrSafeDocument?.addEventListener('visibilitychange', flushStats)\n"],"names":["announceFromElement","el","options","announce","getAttribute","innerText","trim","message","assertive","setContainerContent","container","ssrSafeDocument","querySelector","textContent","env","getEnv","getLocale","locale","loadEnv","document","envTag","getElementById","JSON","parse","error","console","ready","readyState","Promise","resolve","addEventListener","loaded","ssrSafeWindow","getEnabledFeaturesSet","features","featureFlags","featuresUpperCase","map","feature","toUpperCase","Set","featuresSet","IS_SERVER","memoize","isFeatureEnabled","name","has","featureFlag","runtimeEnvironment","head","content","isPrivateInstance","isEnterprise","bundler","BUNDLER","NoOpStorage","getItem","setItem","removeItem","clear","key","length","safeStorage","storageKey","throwQuotaErrorsOnSet","global","deserialize","value","serialize","storage","emitStats","sendCacheStats","sendStats","incrementKey","ttl","expiryKey","now","Date","getTime","expiry","Number","toString","Error","toLowerCase","includes","jsonSafeStorage","storageBackend","window","stringify","SoftNavEvent","Event","constructor","mechanism","type","SoftNavStartEvent","SOFT_NAV_STATE","START","SoftNavSuccessEvent","visitCount","SUCCESS","SoftNavErrorEvent","ERROR","SoftNavEndEvent","END","SOFT_NAV_DURATION_MARK","MECHANISM_MAPPING","turbo","react","ui","hard","Object","freeze","INITIAL","FRAME_UPDATE","RENDER","PROGRESS_BAR","DEFAULT_SOFT_NAV_ERROR_REASON","initSoftNav","dispatchEvent","clearSoftNav","startSoftNav","inSoftNav","setSoftNavMechanism","setSoftNavReactAppName","appName","getCurrentReactAppName","SOFT_NAV_REACT_APP_NAME","SOFT_NAV_REFERRER","location","href","performance","clearResourceTimings","mark","succeedSoftNav","canTriggerEvent","getSoftNavMechanism","endSoftNav","failSoftNav","reason","getSoftNavFailReason","SOFT_NAV_FAIL","endProgressBar","turboFailureReason","turboStartUrl","getSoftNavReferrer","turboEndUrl","SOFT_NAV_MARK","renderedSoftNav","sendRenderStats","duration","getDurationSinceLastSoftNav","getEntriesByName","measure","measures","pop","roundedDuration","Math","round","CustomEvent","detail","requestUrl","softNavigationTiming","destination","initiator","getSoftNavReactAppName","updateFrame","skipIfGoingToReactApp","allowedMechanisms","SOFT_NAV_FAIL_REFERRER","softNav","hasSoftNavFailure","Boolean","setSoftNavFailReason","referrer","SOFT_NAV_EXTERNAL_EVENTS","setup","event","title","e","interceptNavigationUI","navigation","NavigateEvent","prototype","intercept","finished","once","canIntercept","scroll","handler","history","replaceState","currentEntry","getState","navigate","state","undefined","ssrSafeHistory","ssrSafeLocation","pathname","origin","search","hash","IS_BROWSER","wasServerRendered","stats","stat","flushImmediately","samplingProbability","timestamp","loggedIn","staff","isStaff","random","push","flushStats","scheduleSendStats","queued","requestIdleCallback","url","batches","getBatches","items","itemStrings","item","makeBatch","firstItem","shift","batch","size","nextItemSize","itemString","safeSend","data","navigator","sendBeacon","join"],"sourceRoot":""}