{"version":3,"file":"keyboard-shortcuts-dialog-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/client-env/client-env.ts","ui/packages/document-ready/document-ready.ts","ui/packages/feature-flags/feature-flags.ts","ui/packages/get-os/get-os.ts","ui/packages/hotkey/keyboard-shortcuts-helper.ts","ui/packages/ui-commands/components/ScopedCommands.tsx","ui/packages/ui-commands/components/CommandButton.tsx","ui/packages/ui-commands/commands.ts","ui/packages/ui-commands/command-event.ts","ui/packages/ui-commands/metrics.ts","ui/packages/ui-commands/use-detect-conflicts.ts","ui/packages/ui-commands/utils.ts","ui/packages/ui-commands/use-on-key-down.ts","ui/packages/ui-commands/commands-registry.ts","ui/packages/ui-commands/components/GlobalCommands.tsx","ui/packages/ui-commands/commands-context.ts","ui/packages/ui-commands/components/CommandKeybindingHint.tsx","ui/packages/ui-commands/components/CommandIconButton.tsx","ui/packages/ui-commands/components/CommandActionListItem.tsx","ui/packages/keyboard-shortcuts-dialog/components/ShortcutsGroupList.tsx","ui/packages/keyboard-shortcuts-dialog/strings.ts","ui/packages/keyboard-shortcuts-dialog/components/ShortcutsDialog.tsx","ui/packages/keyboard-shortcuts-dialog/KeyboardShortcutsDialog.tsx","ui/packages/keyboard-shortcuts-dialog/keyboard-shortcuts-dialog.ts","ui/packages/react-core/react-partial-registry.ts","ui/packages/react-core/ReactPartialElement.tsx","ui/packages/react-core/register-partial.ts","ui/packages/runtime-environment/runtime-environment.ts","ui/packages/safe-storage/safe-storage.ts","ui/packages/ssr-utils/ssr-globals.ts","ui/packages/ssr-utils/ssr.ts","ui/packages/stats/stats.ts","ui/packages/use-ignore-keyboard-actions-while-composing/use-ignore-keyboard-actions-while-composing.ts","ui/packages/verified-fetch/verified-fetch.ts","ui/packages/keyboard-key/KeyboardKey.tsx","ui/packages/react-core/PartialRouter.tsx","ui/packages/react-core/PartialEntry.tsx","ui/packages/visually-hidden/VisuallyHidden.tsx"],"sourcesContent":["export interface ClientEnvironment {\n  readonly locale: string\n  readonly featureFlags: string[]\n}\n\nlet env: ClientEnvironment | undefined\n\nexport function getEnv() {\n  if (!env) {\n    throw new Error(\n      'Client env was requested before it was loaded. This likely means you are attempting to use client env at the module level in SSR, which is not supported. Please move your client env usage into a function.',\n    )\n  }\n\n  return env\n}\n\nexport function getLocale() {\n  return env?.locale ?? 'en-US'\n}\n\nfunction loadEnv() {\n  if (typeof document !== 'undefined') {\n    const envTag = document.getElementById('client-env')\n    if (envTag) {\n      try {\n        env = JSON.parse(envTag.textContent || '')\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error parsing client-env', error)\n      }\n    }\n  }\n}\n\n// Automatically load the env on initial page load\nloadEnv()\n\n// This is a special helper method for setting the env in the SSR environment only\nexport function setClientEnvForSsr(clientEnv: ClientEnvironment | undefined) {\n  env = clientEnv\n}\n\n// This env object is used as a default for tests only and is not included in production builds\nexport const clientEnvForTests: ClientEnvironment = {\n  locale: 'en',\n  featureFlags: ['test_flag'],\n}\n\nexport function _resetForTests({loadNewEnv, forceUndefined}: {loadNewEnv: boolean; forceUndefined?: boolean}) {\n  // forget the current env\n  env = forceUndefined ? undefined : clientEnvForTests\n\n  if (loadNewEnv) {\n    // load the latest env\n    loadEnv()\n  }\n}\n","import {ssrSafeDocument, ssrSafeWindow} from '@github-ui/ssr-utils'\n\n// Check if document has passed interactive state.\n//\n// The document has finished loading and the document has been parsed but\n// sub-resources such as images, stylesheets and frames are still loading.\n// The state indicates that the DOMContentLoaded event has been fired.\nexport const ready: Promise<void> = (function () {\n  if (ssrSafeDocument?.readyState === 'interactive' || ssrSafeDocument?.readyState === 'complete') {\n    return Promise.resolve()\n  } else {\n    return new Promise<void>(resolve => {\n      ssrSafeDocument?.addEventListener('DOMContentLoaded', () => {\n        resolve()\n      })\n    })\n  }\n})()\n\n// Check if document has passed loaded state.\n//\n// The document and all sub-resources have finished loading. The state\n// indicates that the load event has been fired.\nexport const loaded: Promise<unknown> = (function () {\n  if (ssrSafeDocument?.readyState === 'complete') {\n    return Promise.resolve()\n  } else {\n    return new Promise(resolve => {\n      ssrSafeWindow?.addEventListener('load', resolve)\n    })\n  }\n})()\n","import memoize from '@github/memoize'\nimport {getEnv} from '@github-ui/client-env'\nimport {IS_SERVER} from '@github-ui/ssr-utils'\n\nfunction getEnabledFeaturesSet(): Set<string> {\n  const features = getEnv().featureFlags\n  const featuresUpperCase = features.map(feature => feature.toUpperCase())\n  return new Set<string>(featuresUpperCase)\n}\n\nconst featuresSet = IS_SERVER ? getEnabledFeaturesSet : memoize(getEnabledFeaturesSet)\n\nexport function isFeatureEnabled(name: string): boolean {\n  return featuresSet().has(name.toUpperCase())\n}\n\n//exported to allow mocking in tests\nconst featureFlag = {isFeatureEnabled}\n\nexport {featureFlag}\n","import type {NavigatorUA} from './@types/user-agent-data'\nimport {ssrSafeWindow} from '@github-ui/ssr-utils'\n\nexport type NavigatorUserAgent = NavigatorUA\n\nexport const OS = {\n  Android: 'Android',\n  iOS: 'iOS',\n  macOS: 'macOS',\n  Windows: 'Windows',\n  Linux: 'Linux',\n  Unknown: 'Unknown',\n}\nexport type OS = (typeof OS)[keyof typeof OS]\n\nexport type OSInformation = {\n  os: OS\n  isAndroid: boolean\n  isIOS: boolean\n  isLinux: boolean\n  isMacOS: boolean\n  isWindows: boolean\n  isDesktop: boolean\n  isMobile: boolean\n}\n\nexport function getOS(): OSInformation {\n  let os: OS = OS.Unknown\n  let isMobileOS = false\n  if (ssrSafeWindow) {\n    // TypeScript doesn't 'know' about userAgentData yet\n    const navigator = ssrSafeWindow.navigator as Navigator & NavigatorUA\n    const userAgent = navigator.userAgent\n    const platform = navigator?.userAgentData?.platform || navigator.platform\n    const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K', 'macOS']\n    const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE']\n    const iosPlatforms = ['iPhone', 'iPad', 'iPod']\n\n    if (macosPlatforms.indexOf(platform) !== -1) {\n      os = OS.macOS\n    } else if (iosPlatforms.indexOf(platform) !== -1) {\n      os = OS.iOS\n    } else if (windowsPlatforms.indexOf(platform) !== -1) {\n      os = OS.Windows\n    } else if (/Android/.test(userAgent)) {\n      os = OS.Android\n    } else if (/Linux/.test(platform)) {\n      os = OS.Linux\n    }\n    isMobileOS = navigator?.userAgentData?.mobile ?? (os === OS.Android || os === OS.iOS)\n  }\n\n  return {\n    os,\n    isAndroid: os === OS.Android,\n    isIOS: os === OS.iOS,\n    isMacOS: os === OS.macOS,\n    isWindows: os === OS.Windows,\n    isLinux: os === OS.Linux,\n    isDesktop: os === OS.macOS || os === OS.Windows || os === OS.Linux,\n    isMobile: isMobileOS,\n  }\n}\n\nexport function isMobile(): boolean {\n  return getOS().isMobile\n}\n\nexport function isDesktop(): boolean {\n  return getOS().isDesktop\n}\n\nexport function isAndroid(): boolean {\n  return getOS().isAndroid\n}\n\nexport function isIOS(): boolean {\n  return getOS().isIOS\n}\n\nexport function isMacOS(): boolean {\n  return getOS().isMacOS\n}\n\nexport function isWindows(): boolean {\n  return getOS().isWindows\n}\n\nexport function isLinux(): boolean {\n  return getOS().isLinux\n}\n","import {isFeatureEnabled} from '@github-ui/feature-flags'\nimport {eventToHotkeyString} from './hotkey'\n\n/** Returns false if a user has explicitly disabled character key shortcuts. */\nexport const areCharacterKeyShortcutsEnabled = () => {\n  const keyboardShortcutsPreference = document.querySelector<HTMLMetaElement>(\n    'meta[name=keyboard-shortcuts-preference]',\n  )\n  if (keyboardShortcutsPreference) {\n    return keyboardShortcutsPreference.content === 'all'\n  }\n  return true\n}\n\n/**\n * Character-key shortcuts are implemented only with lowercase characters (\"g\", \"g f\"), uppercase characters (\"Shift+A\", \"a\"),\n * symbols (\"Alt+g\"), and punctuation (\"?\", \"!\", \"/\").\n *\n * Returns true if string is NOT what we define as a character key shortcut.\n */\nexport const isNonCharacterKeyShortcut = (hotkey: string) => {\n  return /Enter|Arrow|Escape|Meta|Control|Esc/.test(hotkey) || (hotkey.includes('Alt') && hotkey.includes('Shift'))\n}\n\nconst nonEditableInputTypes = new Set([\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit',\n])\n\n/**\n * Returns true if `element` is editable - that is, if it can be focused and typed in like an input or textarea.\n */\nexport function isEditableElement(target: EventTarget | null): boolean {\n  if (!(target instanceof HTMLElement)) return false\n\n  const name = target.nodeName.toLowerCase()\n  const type = target.getAttribute('type')?.toLowerCase() ?? 'text'\n\n  const isReadonly =\n    target.ariaReadOnly === 'true' ||\n    target.getAttribute('aria-readonly') === 'true' ||\n    target.getAttribute('readonly') !== null\n\n  return (\n    (name === 'select' ||\n      name === 'textarea' ||\n      (name === 'input' && !nonEditableInputTypes.has(type)) ||\n      target.isContentEditable) &&\n    !isReadonly\n  )\n}\n\n/**\n * Returns false if a user settings has character key shortcut disabled and keyboard event corresponds to a character\n * key shortcut. Character key shortcuts are never enabled on editable form inputs.\n */\nexport const isShortcutAllowed = (event: KeyboardEvent) => {\n  const hotkey = eventToHotkeyString(event)\n\n  const disallowCharKeyShortcutsBecauseEditable =\n    isEditableElement(event.target) && isFeatureEnabled('no_character_key_shortcuts_in_inputs')\n\n  const allowCharacterKeyShortcuts = areCharacterKeyShortcutsEnabled() && !disallowCharKeyShortcutsBecauseEditable\n\n  return isNonCharacterKeyShortcut(hotkey) || allowCharacterKeyShortcuts\n}\n","import {useIgnoreKeyboardActionsWhileComposing} from '@github-ui/use-ignore-keyboard-actions-while-composing'\nimport useIsomorphicLayoutEffect from '@primer/react/lib-esm/utils/useIsomorphicLayoutEffect'\nimport {useCallback, useEffect, useMemo, useRef} from 'react'\nimport {CommandEvent, CommandEventHandlersMap} from '../command-event'\nimport type {CommandId} from '../commands'\nimport {CommandsContextProvider, useCommandsContext} from '../commands-context'\nimport {recordCommandTriggerEvent} from '../metrics'\nimport {useDetectConflicts} from '../use-detect-conflicts'\nimport {useOnKeyDown} from '../use-on-key-down'\nimport {useRegisterCommands} from '../commands-registry'\n\nexport interface ScopedCommandsProps {\n  /** Map of command IDs to the corresponding event handler. */\n  commands: CommandEventHandlersMap\n  children: React.ReactNode\n}\n\n/**\n * Provide command handlers that only work when focus is within a certain part of the React component tree.\n * @example\n * <ScopedCommands commands={{\n *   'commentBox:formatBold': handleFormatBold\n * }}>\n *   <textarea></textarea>\n * </ScopedCommands>\n */\nexport const ScopedCommands = ({commands, children}: ScopedCommandsProps) => {\n  // We store the commands object in a ref so the context won't change on every render and recalculate the whole child tree\n  const commandsRef = useRef(commands)\n  useIsomorphicLayoutEffect(() => {\n    commandsRef.current = commands\n  }, [commands])\n\n  const parentContext = useCommandsContext()\n\n  const triggerCommand = useCallback(\n    <T extends CommandId>(commandId: T, domEvent: KeyboardEvent | MouseEvent) => {\n      const handler = commandsRef.current[commandId]\n\n      if (handler) {\n        const event = new CommandEvent(commandId)\n        try {\n          handler(event)\n        } finally {\n          recordCommandTriggerEvent(event, domEvent)\n        }\n      } else {\n        // no handler here, pass it on up\n        parentContext.triggerCommand(commandId, domEvent)\n      }\n    },\n    [parentContext],\n  )\n\n  useDetectConflicts('scoped', commands)\n\n  useRegisterCommands(commands)\n\n  const contextValue = useMemo(() => ({triggerCommand}), [triggerCommand])\n\n  const onKeyDown = useOnKeyDown(CommandEventHandlersMap.keys(commands), triggerCommand)\n\n  const keyDownProps = useIgnoreKeyboardActionsWhileComposing(onKeyDown)\n\n  // Events first bubble up the DOM tree, then React handles them at the document level and rebuilds a 'synthetic'\n  // JSX tree. If we only handle our events with React, we cannot stop native DOM handlers from capturing those events\n  // first, even if we `stopPropagation`. For example, `@primer/behaviors` uses DOM handlers. So must handle events\n  // with DOM handlers so we can 'get to them first'. However, this is not good enough because with scoped commands we\n  // want the user to be able to fire commands when their focus is inside a menu overlay. This only works with React\n  // handlers because overlays are rendered inside Portals. So we must bind _both_ DOM and React handlers, allowing\n  // `useOnKeyDown` to handle ignoring duplicates.\n  const containerRef = useRef<HTMLDivElement>(null)\n  useEffect(() => {\n    const target = containerRef.current\n    // we are lying by passing DOM events to a React handler, but it works in this case because the handler we passed in can accept DOM events\n    const handler = keyDownProps.onKeyDown as unknown as (e: KeyboardEvent) => void\n    if (!target) return\n\n    target.addEventListener('keydown', handler)\n    return () => target.removeEventListener('keydown', handler)\n  })\n\n  // Typically we want to avoid `display: contents` due to its rocky history in terms of web browser accessibility\n  // support. We've seen bugs appear, get fixed, and then regress again with this property. Unfortunately, there's no\n  // good alternative here. We must wrap contents in some element to intercept keyboard shortcuts, and wrapping\n  // contents in an element inherently introduces potential style and layout breaks. The only way to avoid that is\n  // with `display: contents`; otherwise consumers will have to deal with fixing everything that this breaks every time\n  // they use this component and they will be discouraged from adopting the new platform.\n  return (\n    <CommandsContextProvider value={contextValue}>\n      <div style={{display: 'contents'}} ref={containerRef} {...keyDownProps}>\n        {children}\n      </div>\n    </CommandsContextProvider>\n  )\n}\n\ntry{ ScopedCommands.displayName ||= 'ScopedCommands' } catch {}","import {Button} from '@primer/react'\nimport type {ButtonProps} from '@primer/react'\nimport {getCommandMetadata, type CommandId} from '../commands'\nimport {useCommandsContext} from '../commands-context'\nimport {CommandKeybindingHint} from './CommandKeybindingHint'\nimport {forwardRef} from 'react'\nimport {VisuallyHidden} from '@github-ui/visually-hidden'\n\nexport interface CommandButtonProps extends Omit<ButtonProps, 'onClick'> {\n  commandId: CommandId\n  /** If `children` is not provided, the button will render the command name as its label by default. */\n  children?: ButtonProps['children']\n  /** If `true` and no `trailingVisual` is set, will render a keybinding hint as the trailing visual. */\n  showKeybindingHint?: boolean\n}\n\n/**\n * `CommandButton` is a wrapper around `@primer/react` `Button`, but instead of an `onClick` handler it takes a\n * command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandButton = forwardRef<HTMLButtonElement, CommandButtonProps>(\n  ({commandId, children, trailingVisual, showKeybindingHint = false, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    // trailingVisual only accepts components, not JSX, so we have to jump through hoops to render anything more complex\n    // than an icon (https://github.com/primer/react/issues/3948)\n    // This becomes part of the label which gets noisy (but we don't want to hide this info from screen reader users),\n    // so we wrap in hidden parentheses to offset it a little and make it read better\n    const HintVisual = () => (\n      <>\n        <VisuallyHidden>(</VisuallyHidden>\n        <CommandKeybindingHint commandId={commandId} format=\"condensed\" />\n        <VisuallyHidden>)</VisuallyHidden>\n      </>\n    )\n\n    return (\n      <Button\n        {...forwardProps}\n        onClick={event => triggerCommand(commandId, event.nativeEvent)}\n        trailingVisual={trailingVisual ?? showKeybindingHint ? HintVisual : undefined}\n        ref={ref}\n      >\n        {children ?? metadata.name}\n      </Button>\n    )\n  },\n)\nCommandButton.displayName = 'CommandButton'\n\ntry{ HintVisual.displayName ||= 'HintVisual' } catch {}","import type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {normalizeSequence} from '@github-ui/hotkey'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\nimport jsonMetadata from './__generated__/ui-commands.json'\n\nconst {commands, services} = jsonMetadata\n\nconst serviceCommandIds = new Set(Object.keys(commands) as CommandId[])\n\nexport type ServiceId = keyof typeof services\n\n/** Full joined command ID (in `serviceId:commandId` form). */\nexport type CommandId = keyof typeof commands\nexport const CommandId = {\n  is: (str: string): str is CommandId => serviceCommandIds.has(str as CommandId),\n  getServiceId: (commandId: CommandId) => commandId.split(':')[0] as ServiceId,\n}\n\nexport interface CommandMetadata {\n  name: string\n  description: string\n  defaultBinding?: string\n  featureFlag?: string\n}\n\n/**\n * Get the documentation metadata for the given command. Returns `undefined` if the command is\n * disabled via feature flag.\n */\nexport const getCommandMetadata = (commandId: CommandId) => {\n  const metadata = commands[commandId] as CommandMetadata\n  return !metadata.featureFlag || isFeatureEnabled(metadata.featureFlag.toUpperCase()) ? metadata : undefined\n}\n\n/** Get the documentation metadata for the given service. */\nexport const getServiceMetadata = (serviceId: ServiceId) => services[serviceId]\n\nexport const getKeybinding = (commandId: CommandId): NormalizedSequenceString | undefined => {\n  const metadata = getCommandMetadata(commandId)\n  return metadata?.defaultBinding ? normalizeSequence(metadata.defaultBinding) : undefined\n}\n\n/** Returns a map of id to keybinding, without entries for commands that don't have keybindings. */\nexport const getKeybindings = (commandIds: CommandId[]) =>\n  new Map(\n    commandIds\n      .map(id => [id, getKeybinding(id)])\n      .filter((entry): entry is [CommandId, NormalizedSequenceString] => entry[1] !== undefined),\n  )\n","import {CommandId} from './commands'\n\nexport class CommandEvent<Id extends CommandId = CommandId> {\n  constructor(public readonly commandId: Id) {}\n}\n\nexport type CommandEventHandler<Id extends CommandId = CommandId> = (event: CommandEvent<Id>) => void\n\nexport type CommandEventHandlersMapEntry<Id extends CommandId = CommandId> = [key: Id, handler: CommandEventHandler<Id>]\n\nexport type CommandEventHandlersMap = {\n  [Id in CommandId]?: CommandEventHandler<Id>\n}\nexport const CommandEventHandlersMap = {\n  /**\n   * Iterate over the entries in a handlers map.\n   *\n   * `Object.entries` will broaden the entry type to `[string, CommandEventHandler]` because objects can have unknown\n   * keys (ie, `{a: 1, b: 2}` is assignable to `{a: number}`), so this narrows it back down.\n   */\n  entries: (map: CommandEventHandlersMap) =>\n    Object.entries(map).filter(\n      (entry): entry is CommandEventHandlersMapEntry => CommandId.is(entry[0]) && entry[1] !== undefined,\n    ),\n  keys: (map: CommandEventHandlersMap) => Object.keys(map).filter(CommandId.is),\n}\n","import type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {AnalyticsClient} from '@github/hydro-analytics-client'\nimport type {CommandEvent} from './command-event'\nimport {getKeybinding, type CommandId} from './commands'\n\n/** https://hydro.githubapp.com/hydro_analytics/apps/ui-commands */\nconst HYDRO_APP_ID = 'ui-commands'\n\nconst client = new AnalyticsClient({\n  collectorUrl: `https://collector.githubapp.com/${HYDRO_APP_ID}/collect`,\n})\n\ntype CommandTriggerEvent = {\n  /** Full command ID in `service:command` form. */\n  command_id: CommandId\n  /**\n   * How the event was triggered. More event methods may be added in the future:\n   *  - `\"keybinding\"`: Via a keydown event according to the configured keybinding for the command.\n   */\n  trigger_type: 'keybinding' | 'click'\n  /**\n   * HTML of the opening tag of the target element for the event that triggered this command. When `trigger_type` is\n   * `\"keybinding\"` this is the currently focused element if there is one; otherwise it will be the `<body>`.\n   */\n  target_element_html?: string\n  /** The keybinding (in hotkey string format) configured for this command, if there is one. */\n  keybinding?: NormalizedSequenceString\n  /** If the handler threw an exception synchronously, this is a string representation of that exception. */\n  handler_exception?: string\n}\nconst CommandTriggerEvent = {\n  TYPE: 'command.trigger',\n  send(context: CommandTriggerEvent) {\n    client.sendEvent(CommandTriggerEvent.TYPE, context)\n  },\n}\n\n/** Get the opening HTML tag of the given element. */\nfunction getOpeningHtmlTag(element: HTMLElement) {\n  const tagName = element.tagName.toLowerCase()\n  const attributes = Array.from(element.attributes)\n    .map(attr => `${attr.name}=\"${attr.value.replaceAll('\"', '\\\\\"')}\"`)\n    .join(' ')\n  return `<${tagName}${attributes ? ` ${attributes}` : ''}>`\n}\n\n/** Record a Hydro analytics event for triggering a command. */\nexport function recordCommandTriggerEvent(commandEvent: CommandEvent, domEvent: KeyboardEvent | MouseEvent) {\n  CommandTriggerEvent.send({\n    command_id: commandEvent.commandId,\n    trigger_type: domEvent instanceof KeyboardEvent ? 'keybinding' : 'click',\n    target_element_html: domEvent.target instanceof HTMLElement ? getOpeningHtmlTag(domEvent.target) : undefined,\n    keybinding: getKeybinding(commandEvent.commandId),\n  })\n}\n","import type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {CommandEventHandlersMap} from './command-event'\nimport type {CommandId} from './commands'\nimport {getKeybindings} from './commands'\nimport {useEffect, useMemo} from 'react'\nimport {filterOnce} from './utils'\n\n/**\n * Mutable map of registered commands. Keys are the resolved keybindings, while the values are arrays of all\n * existing registered command IDs with that keybinding. Since the same command could potentially be accidentally\n * registered twice, the value is an array rather than a set.\n */\ntype CommandRegistry = Map<NormalizedSequenceString, readonly CommandId[]>\n\nconst registeredGlobalCommands: CommandRegistry = new Map()\n\nexport function useDetectConflicts(scope: 'global' | 'scoped', commands: CommandEventHandlersMap) {\n  const registeredScopedCommands = useMemo<CommandRegistry>(() => new Map(), [])\n\n  const registeredCommands = scope === 'global' ? registeredGlobalCommands : registeredScopedCommands\n\n  /** Add commands to the global registry and log a warning if there is a conflict. */\n  useEffect(() => {\n    for (const [commandId, keybinding] of getKeybindings(CommandEventHandlersMap.keys(commands))) {\n      const alreadyRegisteredIds = registeredCommands.get(keybinding) ?? []\n\n      if (alreadyRegisteredIds.length)\n        // eslint-disable-next-line no-console\n        console.warn(\n          `The keybinding (${keybinding}) for the \"${commandId}\" command conflicts with the keybinding for the already-registered command(s) \"${alreadyRegisteredIds.join(\n            ', ',\n          )}\". This may result in unpredictable behavior.`,\n        )\n\n      registeredCommands.set(keybinding, alreadyRegisteredIds.concat(commandId))\n    }\n\n    return () => {\n      for (const [commandId, keybinding] of getKeybindings(CommandEventHandlersMap.keys(commands))) {\n        // If it was registered multiple times, be careful only to remove one so we can accurately keep warning\n        const remainingCommandIds = filterOnce(registeredCommands.get(keybinding) ?? [], commandId)\n\n        if (remainingCommandIds?.length) registeredCommands.set(keybinding, remainingCommandIds)\n        else registeredCommands.delete(keybinding)\n      }\n    }\n  }, [commands, registeredCommands])\n}\n","/** Return a copy of the array without the first encountered instance of `value` (based on `===` comparison). */\nexport function filterOnce<T>(array: readonly T[], value: T) {\n  let encounteredOnce = false\n  return array.filter(el => {\n    if (el === value && !encounteredOnce) {\n      encounteredOnce = true\n      return false\n    }\n    return true\n  })\n}\n","import type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {SequenceTracker, eventToHotkeyString} from '@github-ui/hotkey'\nimport {isShortcutAllowed} from '@github-ui/hotkey/keyboard-shortcuts-helper'\nimport {useCallback, useMemo, useRef} from 'react'\nimport type {CommandId} from './commands'\nimport {getKeybinding} from './commands'\n\nexport function useOnKeyDown(commandsIds: CommandId[], triggerCommand: (id: CommandId, event: KeyboardEvent) => void) {\n  const sequenceTracker = useMemo(() => new SequenceTracker(), [])\n\n  /** Map of keybinding string to command ID for fast lookup. */\n  const keybindingMap = useMemo(() => {\n    const map = new Map<NormalizedSequenceString, CommandId>()\n\n    for (const id of commandsIds) {\n      const keybinding = getKeybinding(id)\n      if (keybinding) map.set(keybinding, id)\n    }\n\n    return map\n  }, [commandsIds])\n\n  const lastEventRef = useRef<KeyboardEvent | null>(null)\n\n  return useCallback(\n    (event: React.KeyboardEvent | KeyboardEvent) => {\n      const nativeEvent = 'nativeEvent' in event ? event.nativeEvent : event\n\n      // This handler may be registered at both the DOM and React levels; in that case we want to avoid registering /\n      // handling the same event twice.\n      if (lastEventRef.current === nativeEvent) return\n      lastEventRef.current = nativeEvent\n\n      if (!isShortcutAllowed(nativeEvent)) {\n        sequenceTracker.reset()\n        return\n      }\n\n      sequenceTracker.registerKeypress(nativeEvent)\n\n      // First look for matching sequences, then for a matching hotkey for just this press\n      const commandId =\n        keybindingMap.get(sequenceTracker.sequence) ?? keybindingMap.get(eventToHotkeyString(nativeEvent))\n      if (!commandId) return\n\n      sequenceTracker.reset()\n      event.preventDefault()\n      event.stopPropagation()\n\n      triggerCommand(commandId, nativeEvent)\n    },\n    [keybindingMap, sequenceTracker, triggerCommand],\n  )\n}\n","import {useEffect, useId} from 'react'\nimport {CommandEventHandlersMap} from './command-event'\nimport {CommandId, getCommandMetadata, getServiceMetadata, type ServiceId} from './commands'\n\n/**\n * Registered command IDs. The key is a globally unique ID for each source that will be used to unregister or update\n * the commands; this allows commands to be registered multiple times on a page (ie, in different scopes).\n */\nconst registeredCommands = new Map<string, CommandId[]>()\n\nexport type UIService = {\n  id: string\n  name: string\n}\n\nexport type UICommand = {\n  id: CommandId\n  name: string\n  description: string\n  keybinding?: string | string[]\n}\n\nexport type UICommandGroup = {\n  service: UIService\n  commands: UICommand[]\n}\n\n/**\n * Get the set of IDs of all commands currently registered on the page, regardless of scope. From these IDs the\n * command metadata can be obtained with `getCommandMetadata(commandId)`, and the service metadata can be obtained with\n * `getServiceMetadata(CommandId.getServiceId(commandId))`.\n */\nexport function getAllRegisteredCommands(): UICommandGroup[] {\n  const uiCommandGroupMap = new Map<ServiceId, UICommandGroup>()\n  for (const commandId of new Set(Array.from(registeredCommands.values()).flat())) {\n    const serviceId = CommandId.getServiceId(commandId)\n    if (!uiCommandGroupMap.has(serviceId)) {\n      const service = getServiceMetadata(serviceId)\n      uiCommandGroupMap.set(serviceId, {\n        service: {id: service.id, name: service.name},\n        commands: [],\n      })\n    }\n    const command = getCommandMetadata(commandId)\n    if (command && command.defaultBinding) {\n      uiCommandGroupMap.get(serviceId)?.commands.push({\n        id: commandId,\n        name: command.name,\n        description: command.description,\n        keybinding: command.defaultBinding,\n      })\n    }\n  }\n\n  return Array.from(uiCommandGroupMap.values())\n}\n\n/** Register commands into the global command registry for display in help dialog. */\nexport const useRegisterCommands = (commands: CommandEventHandlersMap) => {\n  const sourceId = useId()\n\n  useEffect(() => {\n    registeredCommands.set(sourceId, CommandEventHandlersMap.keys(commands))\n\n    return () => {\n      registeredCommands.delete(sourceId)\n    }\n  }, [commands, sourceId])\n}\n","import {useCallback, useEffect} from 'react'\nimport {CommandEvent, CommandEventHandlersMap} from '../command-event'\nimport {CommandId} from '../commands'\nimport {recordCommandTriggerEvent} from '../metrics'\nimport {useDetectConflicts} from '../use-detect-conflicts'\nimport {useOnKeyDown} from '../use-on-key-down'\nimport {useRegisterCommands} from '../commands-registry'\n\nexport interface GlobalCommandsProps {\n  /** Map of command IDs to the corresponding event handler. */\n  commands: CommandEventHandlersMap\n}\n\n/**\n * There's no context for global commands because they can be defined in any react app on the page. So to be able to\n * trigger them without keyboard events, we emit and listen for custom DOM events instead.\n */\nconst customDomEventName = 'ui-command-trigger'\n\n/** Trigger a global command without a keyboard event. */\nexport function dispatchGlobalCommand(commandId: CommandId, domEvent: KeyboardEvent | MouseEvent) {\n  document.dispatchEvent(\n    new CustomEvent(customDomEventName, {\n      detail: {\n        commandId,\n        domEvent,\n      },\n    }),\n  )\n}\n\n/**\n * Provide command handlers that only work when focus is within a certain part of the React component tree.\n *\n * @example\n * <GlobalCommands commands={{'issues:navigateToCode': navigateToCode}} />\n */\nexport const GlobalCommands = ({commands}: GlobalCommandsProps) => {\n  const triggerCommand = useCallback(\n    <T extends CommandId>(commandId: T, domEvent: KeyboardEvent | MouseEvent) => {\n      const handler = commands[commandId]\n\n      if (handler) {\n        const event = new CommandEvent(commandId)\n        try {\n          handler(event)\n        } finally {\n          recordCommandTriggerEvent(event, domEvent)\n        }\n      }\n    },\n    [commands],\n  )\n\n  const onKeyDown = useOnKeyDown(CommandEventHandlersMap.keys(commands), triggerCommand)\n\n  useDetectConflicts('global', commands)\n\n  useRegisterCommands(commands)\n\n  useEffect(() => {\n    // Types for this are a massive pain because _anything_ can emit an event with this name\n    const onCustomEvent = (event: Event) => {\n      const detail = 'detail' in event && typeof event.detail === 'object' ? event.detail : undefined\n      if (!detail) return\n\n      const commandId =\n        'commandId' in detail && typeof detail.commandId === 'string' && CommandId.is(detail.commandId)\n          ? detail.commandId\n          : undefined\n      const domEvent =\n        'domEvent' in detail && (detail.domEvent instanceof KeyboardEvent || detail.domEvent instanceof MouseEvent)\n          ? detail.domEvent\n          : undefined\n      if (!commandId || !domEvent) return\n\n      triggerCommand(commandId, domEvent)\n    }\n\n    document.addEventListener('keydown', onKeyDown)\n    document.addEventListener(customDomEventName, onCustomEvent)\n\n    return () => {\n      document.removeEventListener('keydown', onKeyDown)\n      document.removeEventListener(customDomEventName, onCustomEvent)\n    }\n  }, [onKeyDown, triggerCommand])\n\n  return null\n}\n\ntry{ GlobalCommands.displayName ||= 'GlobalCommands' } catch {}","import {createContext, useContext} from 'react'\nimport type {CommandId} from './commands'\nimport {dispatchGlobalCommand} from './components/GlobalCommands'\n\ninterface CommandsContext {\n  triggerCommand: (id: CommandId, domEvent: KeyboardEvent | MouseEvent) => void\n}\n\nconst CommandsContext = createContext<CommandsContext>({\n  // Without any scope context, we just emit a global event\n  triggerCommand: dispatchGlobalCommand,\n})\n\nexport const CommandsContextProvider = CommandsContext.Provider\n\nexport const useCommandsContext = () => useContext(CommandsContext)\n","import type {KeyboardKeyProps} from '@github-ui/keyboard-key'\nimport {KeyboardKey} from '@github-ui/keyboard-key'\nimport type {CommandId} from '../commands'\nimport {getKeybinding} from '../commands'\n\ninterface CommandKeybindingHintProps extends Omit<KeyboardKeyProps, 'keys'> {\n  commandId: CommandId\n}\n\n/** Renders a visual representing the keybinding for a command. If no keybinding is present, renders nothing. */\nexport const CommandKeybindingHint = ({commandId, ...props}: CommandKeybindingHintProps) => {\n  const keys = getKeybinding(commandId)\n  return keys ? <KeyboardKey keys={keys} {...props} /> : null\n}\n\ntry{ CommandKeybindingHint.displayName ||= 'CommandKeybindingHint' } catch {}","import type {IconButtonProps} from '@primer/react'\nimport {IconButton} from '@primer/react'\nimport {forwardRef} from 'react'\nimport {getCommandMetadata, type CommandId} from '../commands'\nimport {useCommandsContext} from '../commands-context'\n\nexport interface CommandIconButtonProps extends Omit<IconButtonProps, 'onClick' | 'aria-label' | 'aria-labelledby'> {\n  commandId: CommandId\n  /** If `aria-label` is not provided, the button will render the command name as its label by default. */\n  ['aria-label']?: IconButtonProps['aria-label']\n}\n\n/**\n * `CommandButton` is a wrapper around `@primer/react` `Button`, but instead of an `onClick` handler it takes a\n * command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandIconButton = forwardRef<HTMLButtonElement, CommandIconButtonProps>(\n  ({commandId, ['aria-label']: ariaLabel, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    return (\n      <IconButton\n        {...forwardProps}\n        aria-label={ariaLabel ?? metadata.name}\n        onClick={event => triggerCommand(commandId, event.nativeEvent)}\n        ref={ref}\n      />\n    )\n  },\n)\nCommandIconButton.displayName = 'CommandIconButton'\n","import type {ActionListItemProps} from '@primer/react'\nimport {ActionList} from '@primer/react'\nimport {forwardRef} from 'react'\nimport {getCommandMetadata, type CommandId} from '../commands'\nimport {useCommandsContext} from '../commands-context'\nimport {CommandKeybindingHint} from './CommandKeybindingHint'\n\nexport interface CommandActionListItemProps extends Omit<ActionListItemProps, 'onClick'> {\n  commandId: CommandId\n  /** If `children` is not provided, the item will render the command name by default. */\n  children?: ActionListItemProps['children']\n  /**\n   * Set the item description (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.Description`).\n   */\n  description?: React.ReactNode\n  /**\n   * Set the leading visual (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.LeadingVisual`).\n   */\n  leadingVisual?: React.ReactNode\n  /**\n   * Override the trailing visual (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.TrailingVisual`).\n   *\n   * By default, if a keybinding is configured for the command, this will be a visual keybinding hint. To disable this\n   * without providing an alternative, set `trailingVisual` to `null`.\n   */\n  trailingVisual?: React.ReactNode\n}\n\n/**\n * `CommandActionListItem` is a wrapper around `@primer/react` `ActionList.Item`, but instead of an `onClick` handler\n * it takes a command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandActionListItem = forwardRef<HTMLLIElement, CommandActionListItemProps>(\n  ({commandId, children, description, leadingVisual, trailingVisual, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    return (\n      <ActionList.Item {...forwardProps} onSelect={event => triggerCommand(commandId, event.nativeEvent)} ref={ref}>\n        {children ?? metadata.name}\n\n        {description && <ActionList.Description>{description}</ActionList.Description>}\n\n        {leadingVisual && <ActionList.LeadingVisual>{leadingVisual}</ActionList.LeadingVisual>}\n\n        {\n          // Allow disabling the keybinding hint by explicitly setting `trailingVisual` to `null`\n          trailingVisual !== null && (\n            <ActionList.TrailingVisual>\n              {trailingVisual ?? <CommandKeybindingHint commandId={commandId} format=\"condensed\" />}\n            </ActionList.TrailingVisual>\n          )\n        }\n      </ActionList.Item>\n    )\n  },\n)\nCommandActionListItem.displayName = 'ActionList.CommandItem'\n","import {Box} from '@primer/react'\nimport {KeyboardKey} from '@github-ui/keyboard-key'\nimport {Fragment, useId} from 'react'\nimport type {ShortcutsGroup} from '../types'\n\ninterface ShortcutsGroupListProps {\n  group: ShortcutsGroup\n}\n\nexport function ShortcutsGroupList({\n  group: {\n    service: {name: serviceName},\n    commands,\n  },\n}: ShortcutsGroupListProps) {\n  const labelId = useId()\n\n  return (\n    <Box\n      sx={{\n        borderRadius: 2,\n        border: '1px solid',\n        borderColor: 'border.default',\n        overflow: 'hidden',\n      }}\n    >\n      <Box as=\"h3\" id={labelId} sx={{bg: 'canvas.subtle', fontWeight: 'bold', py: 2, px: 3, fontSize: 1}}>\n        {serviceName}\n      </Box>\n\n      <Box as=\"ul\" role=\"list\" aria-labelledby={labelId} sx={{listStyleType: 'none'}}>\n        {commands.map(({id, name, keybinding}) => (\n          <Box\n            as=\"li\"\n            key={id}\n            sx={{\n              borderTop: '1px solid',\n              borderColor: 'border.default',\n              py: 2,\n              px: 3,\n              display: 'flex',\n              gap: 2,\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <Box>{name}</Box>\n            <Box sx={{textAlign: 'right'}}>\n              {(Array.isArray(keybinding) ? keybinding : [keybinding]).map((keys, i) => (\n                <Fragment key={keys}>\n                  {i > 0 && ' or '}\n                  <KeyboardKey keys={keys} />\n                </Fragment>\n              ))}\n            </Box>\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  )\n}\n\ntry{ ShortcutsGroupList.displayName ||= 'ShortcutsGroupList' } catch {}","export default {\n  keyboardShortcuts: 'Keyboard shortcuts',\n  siteWideShortcuts: 'Site-wide shortcuts',\n  loading: 'Loading',\n}\n","import {VisuallyHidden} from '@github-ui/visually-hidden'\nimport {Box, Button, Spinner, type SxProp} from '@primer/react'\nimport {Dialog} from '@primer/react/experimental'\nimport {useState, type PropsWithChildren, useEffect} from 'react'\nimport {ShortcutsGroupList} from './ShortcutsGroupList'\nimport strings from '../strings'\nimport type {ShortcutsGroup} from '../types'\nimport {getAllRegisteredCommands, type UICommandGroup} from '@github-ui/ui-commands/internal'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\nimport {normalizeSequence} from '@github-ui/hotkey'\n\ntype APIShortcuts = {\n  commands: {\n    global: UICommandGroup\n    [key: string]: UICommandGroup\n  }\n}\ninterface ShortcutsDialogProps {\n  visible: boolean\n  onVisibleChange: (visible: boolean) => void\n}\n\nconst LoadingState = () => (\n  <Box role=\"status\" sx={{display: 'flex', height: '100%', justifyContent: 'center', alignItems: 'center'}}>\n    <Spinner size=\"large\" />\n    <VisuallyHidden>{strings.loading}</VisuallyHidden>\n  </Box>\n)\n\nconst parseShortcut = (keybinding?: string | string[]) => {\n  return Array.isArray(keybinding) ? keybinding.map(kb => normalizeSequence(kb)) : normalizeSequence(keybinding ?? '')\n}\n\nconst Columns = ({children}: PropsWithChildren) => (\n  <Box sx={{display: 'flex', flexDirection: 'row', gap: 2, flexWrap: 'wrap'}}>{children}</Box>\n)\n\nconst Column = ({children}: PropsWithChildren & SxProp) => (\n  <Box sx={{flex: '250px', display: 'flex', flexDirection: 'column', gap: 2}}>{children}</Box>\n)\n\nexport const ShortcutsDialog = ({visible, onVisibleChange}: ShortcutsDialogProps) => {\n  const [siteWideShortcuts, setSiteWideShortcuts] = useState<ShortcutsGroup>({\n    service: {id: 'global', name: 'Global'},\n    commands: [],\n  })\n  const [shortcutGroups, setShortcutGroups] = useState<ShortcutsGroup[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  // Fetch keyboard shortcuts from the server\n  useEffect(() => {\n    const uiCommandGroups = getAllRegisteredCommands()\n    const fetchShortcuts = async () => {\n      setIsLoading(true)\n      const metaKeyboardShortcuts = document.querySelector<HTMLMetaElement>('meta[name=github-keyboard-shortcuts]')\n      if (!metaKeyboardShortcuts) throw new Error('The \"github-keyboard-shortcuts\" meta tag must be present')\n      const options = {contexts: metaKeyboardShortcuts.content}\n      const url = `/site/keyboard_shortcuts?${new URLSearchParams(options).toString()}`\n      const resp = await verifiedFetchJSON(url, {method: 'GET'})\n      if (resp.ok) {\n        const shortcuts: APIShortcuts = await resp.json()\n        const {global, ...rest} = shortcuts.commands\n        setSiteWideShortcuts({\n          service: {\n            id: 'global',\n            name: strings.siteWideShortcuts,\n          },\n          commands: [\n            ...global.commands,\n            ...(uiCommandGroups.find(uiCommandGroup => uiCommandGroup.service.id === 'global')?.commands ?? []),\n          ].map(command => {\n            return {\n              ...command,\n              keybinding: parseShortcut(command.keybinding),\n            }\n          }),\n        })\n\n        const transformedGroups = [...Object.values(rest), ...uiCommandGroups].map(group => {\n          return {\n            ...group,\n            commands: group.commands.map(command => {\n              return {\n                ...command,\n                keybinding: parseShortcut(command.keybinding),\n              }\n            }),\n          }\n        })\n\n        setShortcutGroups(transformedGroups)\n      } else {\n        setShortcutGroups(\n          uiCommandGroups.map(group => {\n            return {\n              ...group,\n              commands: group.commands.map(command => {\n                return {\n                  ...command,\n                  keybinding: parseShortcut(command.keybinding),\n                }\n              }),\n            }\n          }),\n        )\n      }\n      setIsLoading(false)\n    }\n\n    if (visible) fetchShortcuts()\n  }, [visible])\n\n  if (!visible) return null\n  return (\n    <Dialog\n      title={strings.keyboardShortcuts}\n      aria-modal=\"true\"\n      width=\"xlarge\"\n      height=\"large\"\n      onClose={() => onVisibleChange(false)}\n      sx={{color: 'fg.default'}}\n    >\n      {isLoading ? (\n        <LoadingState />\n      ) : (\n        <Columns>\n          <Column>\n            {shortcutGroups.map(group => (\n              <ShortcutsGroupList group={group} key={group.service.id} />\n            ))}\n          </Column>\n\n          <Column>\n            <ShortcutsGroupList group={siteWideShortcuts} key={siteWideShortcuts.service.id} />\n            <Button\n              as=\"a\"\n              href=\"https://docs.github.com/en/get-started/accessibility/keyboard-shortcuts\"\n              sx={{width: '100%'}}\n            >\n              View all keyboard shortcuts\n            </Button>\n          </Column>\n        </Columns>\n      )}\n    </Dialog>\n  )\n}\n\ntry{ LoadingState.displayName ||= 'LoadingState' } catch {}\ntry{ Columns.displayName ||= 'Columns' } catch {}\ntry{ Column.displayName ||= 'Column' } catch {}\ntry{ ShortcutsDialog.displayName ||= 'ShortcutsDialog' } catch {}","import {useState} from 'react'\nimport {GlobalCommands} from '@github-ui/ui-commands'\nimport {ShortcutsDialog} from './components/ShortcutsDialog'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\n\nexport function KeyboardShortcutsDialog() {\n  const [isVisible, setVisible] = useState(false)\n\n  // Need to return a fragment or react partials get mad about the return type being undefined\n  if (!isFeatureEnabled('react_keyboard_shortcuts_dialog')) return <></>\n\n  return (\n    <>\n      <GlobalCommands commands={{'keyboard-shortcuts-dialog:show-dialog': () => setVisible(true)}} />\n      <ShortcutsDialog visible={isVisible} onVisibleChange={setVisible} />\n    </>\n  )\n}\n\ntry{ KeyboardShortcutsDialog.displayName ||= 'KeyboardShortcutsDialog' } catch {}","import {registerReactPartial} from '@github-ui/react-core/register-partial'\nimport {KeyboardShortcutsDialog} from './KeyboardShortcutsDialog'\n\nregisterReactPartial('keyboard-shortcuts-dialog', {\n  Component: KeyboardShortcutsDialog,\n})\n","import {DeferredRegistry} from './deferred-registry'\n\nexport interface PartialRegistration {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Component: React.ComponentType<any>\n}\n\nexport const partialRegistry = new DeferredRegistry<PartialRegistration>()\n\nexport function getReactPartial(appName: string) {\n  return partialRegistry.getRegistration(appName)\n}\n","import {controller} from '@github/catalyst'\nimport {getReactPartial} from './react-partial-registry'\nimport type {EmbeddedPartialData} from './embedded-data-types'\nimport {ReactBaseElement} from './ReactBaseElement'\nimport {PartialEntry} from './PartialEntry'\n\n// What is this silliness? Is it react or a web component?!\n// It's a web component we use to bootstrap react partials within the monolith.\n@controller\nclass ReactPartialElement extends ReactBaseElement<EmbeddedPartialData> {\n  nameAttribute = 'partial-name'\n\n  async getReactNode(embeddedData: EmbeddedPartialData) {\n    const {Component} = await getReactPartial(this.name)\n\n    return (\n      <PartialEntry\n        partialName={this.name}\n        embeddedData={embeddedData}\n        Component={Component}\n        wasServerRendered={this.hasSSRContent}\n        ssrError={Boolean(this.ssrError)}\n      />\n    )\n  }\n}\n","import {partialRegistry, type PartialRegistration} from './react-partial-registry'\n// Import the web component to get it registered on the window\nimport './ReactPartialElement'\n\nexport function registerReactPartial(name: string, registration: PartialRegistration) {\n  partialRegistry.register(name, registration)\n}\n","import memoize from '@github/memoize'\nimport {ssrSafeDocument} from '@github-ui/ssr-utils'\n\nconst runtimeEnvironment = memoize(githubEnvironment)\n\n// return the github instance environment\n// if dotcom, returns 'dotcom'\n// if enterprise, returns 'enterprise' (ghes and ghae both)\nfunction githubEnvironment(): string {\n  return ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"runtime-environment\"]')?.content || ''\n}\n\nexport const isPrivateInstance = memoize(isGitHubPrivateInstance)\nfunction isGitHubPrivateInstance(): boolean {\n  return ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"is-private-instance\"]')?.content === 'true'\n}\n\nexport const isEnterprise = memoize(isEnterpriseEnvironment)\nfunction isEnterpriseEnvironment(): boolean {\n  return runtimeEnvironment() === 'enterprise'\n}\n\n// This is the \"bundler\" that built the client-side assets, e.g. \"webpack\"\nexport const bundler = typeof BUNDLER !== 'undefined' ? BUNDLER : undefined\n","import {ssrSafeWindow} from '@github-ui/ssr-utils'\nimport {sendStats} from '@github-ui/stats'\n\ntype StorageBackend = 'sessionStorage' | 'localStorage'\n\n/**\n * An implementation of the Storage API that throws away all data.  Used in\n * cases when the requested Storage backend is not available.\n */\nclass NoOpStorage {\n  getItem() {\n    return null\n  }\n\n  setItem() {\n    return undefined\n  }\n\n  removeItem() {\n    return undefined\n  }\n\n  clear() {\n    return undefined\n  }\n\n  key() {\n    return null\n  }\n\n  get length() {\n    return 0\n  }\n}\n\ntype SafeStorageOptions = {\n  /** Callers may opt not to suppress quota errors thrown on set in case they rely on recieving them. */\n  throwQuotaErrorsOnSet: boolean\n  /** The amount of time the value should remain in storage, in milliseconds */\n  ttl?: number\n  /** Don't send stats in CI */\n  sendCacheStats?: boolean\n}\n\n/**\n * Safely access Storage items by wrapping a Storage instance\n * (localStorage or sessionStorage) with safe versions of its API\n * methods.  Callers may opt not to suppress quota errors thrown on\n * set in case they rely on recieving them.\n */\nexport default function safeStorage<T = string>(\n  storageKey: StorageBackend,\n  options: SafeStorageOptions = {throwQuotaErrorsOnSet: false},\n  global = ssrSafeWindow,\n  deserialize: (value: string) => T = value => value as unknown as T,\n  serialize: (value: T) => string = (value: T) => value as unknown as string,\n) {\n  let storage: Storage\n  try {\n    if (!global) {\n      // in an SSR environment, use noop storage\n      throw new Error()\n    }\n\n    storage = global[storageKey] || new NoOpStorage()\n  } catch {\n    storage = new NoOpStorage()\n  }\n\n  const {throwQuotaErrorsOnSet} = options\n\n  function emitStats(key: PlatformBrowserIncrementKey) {\n    if (options.sendCacheStats) {\n      sendStats({incrementKey: key})\n    }\n  }\n\n  /**  Safely get storage item. Returns `null` if the item is older than the provided ttl */\n  function getItem(key: string, now: number = new Date().getTime()): T | null {\n    try {\n      const value = storage.getItem(key)\n      if (!value) {\n        return null\n      }\n      const expiryKey = `${key}:expiry`\n      const expiry = Number(storage.getItem(expiryKey))\n      if (expiry && now > expiry) {\n        removeItem(key)\n        removeItem(expiryKey)\n        emitStats('SAFE_STORAGE_VALUE_EXPIRED')\n        return null\n      } else {\n        emitStats('SAFE_STORAGE_VALUE_WITHIN_TTL')\n        return deserialize(value)\n      }\n    } catch (error) {\n      // Ignore browser private mode error.\n      return null\n    }\n  }\n\n  /**\n   * Safely set storage item.\n   * If `ttl` is provided, set an expiry time for the item under the key `${key}:expiry`\n   * This function will be called\n   */\n  function setItem(key: string, value: T, now: number = new Date().getTime()) {\n    try {\n      storage.setItem(key, serialize(value) as unknown as string)\n      if (options.ttl) {\n        const expiryKey = `${key}:expiry`\n        const expiry = now + options.ttl\n        storage.setItem(expiryKey, expiry.toString())\n      }\n    } catch (error) {\n      if (throwQuotaErrorsOnSet && error instanceof Error && error.message.toLowerCase().includes('quota')) throw error\n    }\n  }\n\n  // Safely remove storage item.\n  function removeItem(key: string) {\n    try {\n      storage.removeItem(key)\n      if (options.ttl) {\n        const expiryKey = `${key}:expiry`\n        storage.removeItem(expiryKey)\n      }\n    } catch (error) {\n      // Ignore browser private mode error.\n    }\n  }\n\n  return {\n    getItem,\n    setItem,\n    removeItem,\n    clear: storage.clear,\n    key: storage.key,\n    get length() {\n      return storage.length\n    },\n  }\n}\n\nexport function jsonSafeStorage<T>(storageBackend: StorageBackend) {\n  return safeStorage<T>(\n    storageBackend,\n    {throwQuotaErrorsOnSet: false},\n    window,\n    JSON.parse as (value: string) => T,\n    JSON.stringify as (obj: T) => string,\n  )\n}\n","// When using SSR, browser globals are not available. If you try to use them, Node.js will throw an error\ntype SSRSafeLocation = Pick<Location, 'pathname' | 'origin' | 'search' | 'hash'>\n\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeDocument = typeof document === 'undefined' ? undefined : document\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeWindow = typeof window === 'undefined' ? undefined : window\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeHistory = typeof history === 'undefined' ? undefined : history\n\nexport const ssrSafeLocation: SSRSafeLocation =\n  // eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\n  typeof location === 'undefined' ? {pathname: '', origin: '', search: '', hash: ''} : location\n\nexport function setLocation(url: string) {\n  // eslint-disable-next-line no-restricted-syntax\n  const parsedURL: SSRSafeLocation = new URL(url)\n  const {pathname, origin, search, hash} = parsedURL\n\n  Object.assign(ssrSafeLocation, {pathname, origin, search, hash})\n}\n","import {ssrSafeDocument} from './ssr-globals'\n\n/***\n * Are we rendering on the server?\n */\nexport const IS_SERVER = typeof ssrSafeDocument === 'undefined'\n\n/***\n * Are we rendering on the client?\n */\nexport const IS_BROWSER = !IS_SERVER\n\n/***\n * This helper returns `true` if:\n * - we are rendering on the server\n * - we are on the client, and the app has been hydrated from a server-render\n */\nexport function wasServerRendered() {\n  if (IS_SERVER) {\n    return true\n  }\n\n  return Boolean(ssrSafeDocument!.querySelector('react-app[data-ssr=\"true\"]'))\n}\n","import {ssrSafeDocument} from '@github-ui/ssr-utils'\nimport {loaded} from '@github-ui/document-ready'\nimport {bundler} from '@github-ui/runtime-environment'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\n\nlet stats: PlatformBrowserStat[] = []\nconst chunkSize = 64 * 1024\n\nexport function sendStats(stat: PlatformBrowserStat, flushImmediately = false, samplingProbability = 1.0): void {\n  if (isFeatureEnabled('BROWSER_STATS_DISABLED') === true) {\n    return\n  }\n  if (samplingProbability < 0 || samplingProbability > 1) {\n    throw new RangeError('Sampling probability must be between 0 and 1')\n  }\n\n  if (stat.timestamp === undefined) stat.timestamp = new Date().getTime()\n  stat.loggedIn = isLoggedIn()\n  stat.staff = isStaff()\n  stat.bundler = bundler\n  if (Math.random() < samplingProbability) {\n    stats.push(stat)\n  }\n\n  if (flushImmediately) {\n    flushStats()\n  } else {\n    scheduleSendStats()\n  }\n}\n\nlet queued: number | null = null\n\nasync function scheduleSendStats() {\n  await loaded\n  if (queued == null) {\n    queued = window.requestIdleCallback(flushStats)\n  }\n}\n\nfunction flushStats() {\n  queued = null\n  if (!stats.length) {\n    return\n  }\n\n  const url = ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"browser-stats-url\"]')?.content\n  if (!url) {\n    return\n  }\n\n  const batches = getBatches(stats)\n\n  for (const batch of batches) {\n    safeSend(url, `{\"stats\": [${batch.join(',')}] }`)\n  }\n\n  stats = []\n}\n\n// getBatches breaks up the list of stats into smaller batches\n// that are less than 64kb in size. This is to avoid hitting the\n// size limit of the beacon API.\nfunction getBatches(items: PlatformBrowserStat[]): string[][] {\n  const batches: string[][] = []\n  const itemStrings = items.map(item => JSON.stringify(item))\n\n  while (itemStrings.length > 0) {\n    batches.push(makeBatch(itemStrings))\n  }\n\n  return batches\n}\n\n// makeBatch walks the items and collects batches of items that are within\n// the 64kb limit. If an item is too big to fit in a batch, it is sent alone.\nfunction makeBatch(itemStrings: string[]): string[] {\n  const firstItem = itemStrings.shift()!\n  const batch: string[] = [firstItem]\n  let size = firstItem.length\n\n  while (itemStrings.length > 0 && size <= chunkSize) {\n    const nextItemSize = itemStrings[0]!.length\n\n    if (size + nextItemSize <= chunkSize) {\n      const itemString = itemStrings.shift()!\n      batch.push(itemString)\n      size += nextItemSize\n    } else {\n      break\n    }\n  }\n\n  return batch\n}\n\nfunction safeSend(url: string, data: string) {\n  try {\n    if (navigator.sendBeacon) {\n      navigator.sendBeacon(url, data)\n    }\n  } catch {\n    // Silently ignore errors: https://github.com/github/github/issues/178088#issuecomment-829936461\n  }\n}\n\nfunction isLoggedIn(): boolean {\n  return !!ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"user-login\"]')?.content\n}\n\nexport function isStaff(): boolean {\n  return !!ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"user-staff\"]')?.content\n}\n\n// Flush stats before users navigate away from the page\nssrSafeDocument?.addEventListener('pagehide', flushStats)\nssrSafeDocument?.addEventListener('visibilitychange', flushStats)\n","import {isMacOS} from '@github-ui/get-os'\nimport {type CompositionEventHandler, type KeyboardEventHandler, useCallback, useMemo, useRef} from 'react'\n\nconst ignoredKeysLowercase = new Set(['enter', 'tab'])\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement | HTMLDivElement\n\n/**\n * If the user is composing text, we don't want to respond to\n * the `Enter` key to perform a typical activation\n *\n * Composing text is a special case where the user is inputting\n * text from IME (e.g. Japanese) and we don't want to save the\n * item upon receiving the enter key as that may be part of the\n * selection of the character into the input.\n *\n * issue: https://github.com/github/memex/issues/5680\n * related: https://github.com/github/memex/issues/5680\n * related: https://github.com/facebook/react/issues/3926\n *\n * @param onKeyDown: A keyboard handler callback to wrap with a callback which ignores `ENTER`\n * and `TAB` while composing.\n *\n * @returns props which should be spread onto an `<input>` element\n **/\nexport const useIgnoreKeyboardActionsWhileComposing = (\n  onKeyDown: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement>,\n) => {\n  const isComposingRef = useRef(false)\n  const hasCompositionEndedRef = useRef(false)\n\n  const handleComposition: CompositionEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement> =\n    useCallback(event => {\n      if (event.type === 'compositionstart') {\n        isComposingRef.current = true\n        hasCompositionEndedRef.current = false\n      }\n      if (event.type === 'compositionend') {\n        isComposingRef.current = false\n        hasCompositionEndedRef.current = true\n      }\n    }, [])\n\n  const wrappedOnKeyDown: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement> = useCallback(\n    event => {\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      if (ignoredKeysLowercase.has(event.key.toLowerCase()) && isComposingRef.current) {\n        return\n      }\n\n      /*\n       * Safari is known to fire the a unprintable keydown event of 229\n       * after the `compositionend` event.\n       * This is a workaround to prevent the keydown event from firing and causing\n       * the input to be saved.\n       *\n       * Related: https://bugs.webkit.org/show_bug.cgi?id=165004\n       * Related: https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/\n       */\n\n      if (isMacOS() && event.keyCode === 229 && hasCompositionEndedRef.current) {\n        hasCompositionEndedRef.current = false\n        return\n      }\n      onKeyDown(event)\n    },\n    [onKeyDown],\n  )\n\n  const inputProps = useMemo(() => {\n    return {\n      onCompositionStart: handleComposition,\n      onCompositionEnd: handleComposition,\n      onKeyDown: wrappedOnKeyDown,\n    }\n  }, [handleComposition, wrappedOnKeyDown])\n\n  return inputProps\n}\n","/**\n * A Fetch function which will automatically add the correct headers for\n * making requests to GitHub application servers as long as the associated controller methods allow it.\n * Track down the associated controller method and confirm the controller includes\n * ApplicationController::VerifiedFetchDependency as well as `allow_verified_fetch only:`\n * to the relevant controller methods.\n *\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetch('/foo', {method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.text())\ntest.\n *     }\n */\nexport function verifiedFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  if (path.match(/^(https?:|\\/\\/)/)) {\n    throw new Error('Can not make cross-origin requests from verifiedFetch')\n  }\n\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Verified-Fetch': 'true',\n    'X-Requested-With': 'XMLHttpRequest',\n  }\n\n  return fetch(path, {...init, headers})\n}\n\nexport interface JSONRequestInit extends Omit<RequestInit, 'body'> {\n  body?: unknown\n}\n\n/**\n * A Fetch function which will automatically add the correct headers for\n * making JSON requests\n *\n * Will also `JSON.stringify` the request body if provided.\n\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetchJSON('/foo', {body: {foo: 'bar'}, method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.json())\n *     }\n */\nexport function verifiedFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n\n  const body = init?.body ? JSON.stringify(init.body) : undefined\n\n  return verifiedFetch(path, {...init, body, headers})\n}\n","import {Text} from '@primer/react'\nimport {capitalize} from 'lodash-es'\nimport type {ReactNode} from 'react'\nimport {Fragment, memo} from 'react'\nimport {VisuallyHidden} from '@github-ui/visually-hidden'\n\nimport {isMacOS} from '@github-ui/get-os'\n\nexport interface KeyboardKeyProps {\n  /**\n   * The keys involved in this shortcut. These should be the full names of the keys as would\n   * be returned by `KeyboardEvent.key` (e.g. \"Control\", \"Shift\", \"ArrowUp\", \"a\", etc.).\n   *\n   * Combine keys with the \"+\" character to form chords. To represent the \"+\" key, use \"Plus\".\n   *\n   * Combine chords/keys with \" \" to form sequences that should be pressed one after the other. For example, \"a b\"\n   * represents \"a then b\". To represent the \" \" key, use \"Space\".\n   *\n   * The fake key name \"Mod\" can be used to represent \"Command\" on macOS and \"Control\" on other platforms.\n   *\n   * See https://github.com/github/hotkey for format details.\n   */\n  keys: string\n  /**\n   * Control the display format. Condensed is most useful in menus and tooltips, while\n   * the full form is better for prose.\n   */\n  format?: KeyboardKeyFormat\n}\n\ntype KeyboardKeyFormat = 'condensed' | 'full'\n\n// In the below records, we don't intend to cover every single possible key - only those that\n// would be realistically used in shortcuts. For example, the Pause/Break key is not necessary\n// because it is not found on many keyboards.\n\n/**\n * Short-form iconic versions of keys. These should be intuitive and match icons on keyboards.\n */\nconst condensedKeys: Record<string, string> = {\n  alt: isMacOS() ? '⌥' : 'Alt', // the alt key _is_ the option key on MacOS - in the browser there is no \"option\" key\n  control: '⌃',\n  shift: '⇧',\n  meta: isMacOS() ? '⌘' : 'Win',\n  mod: isMacOS() ? '⌘' : '⌃',\n  pageup: 'PgUp',\n  pagedown: 'PgDn',\n  arrowup: '↑',\n  arrowdown: '↓',\n  arrowleft: '←',\n  arrowright: '→',\n  plus: '+', // needed to allow +-separated key names\n  backspace: '⌫',\n  delete: 'Del',\n  space: '␣', // allow consumers to use the word \"Space\" even though it's not the browser key name, because it's more readable in props\n  tab: '⇥',\n  enter: '⏎',\n  escape: 'Esc',\n  function: 'Fn',\n  capslock: 'CapsLock',\n  insert: 'Ins',\n  printscreen: 'PrtScn',\n}\n\n/**\n * Specific key displays for 'full' format. We still do show some icons (ie punctuation)\n * because that's more intuitive, but for the rest of keys we show the standard key name.\n */\nconst fullKeys: Record<string, string> = {\n  alt: isMacOS() ? 'Option' : 'Alt',\n  mod: isMacOS() ? 'Command' : 'Control',\n  '+': 'Plus',\n  pageup: 'Page Up',\n  pagedown: 'Page Down',\n  arrowup: 'Up Arrow',\n  arrowdown: 'Down Arrow',\n  arrowleft: 'Left Arrow',\n  arrowright: 'Right Arrow',\n  capslock: 'Caps Lock',\n  printscreen: 'Print Screen',\n}\n\n/**\n * Accessible key names intended to be read by a screen reader. This prevents screen\n * readers from expressing punctuation in speech, ie, reading a long pause instead of the\n * word \"period\".\n */\nconst keyDescriptions: Record<string, string> = {\n  alt: isMacOS() ? 'option' : 'alt',\n  meta: isMacOS() ? 'command' : 'Windows',\n  mod: isMacOS() ? 'command' : 'control',\n  // Screen readers may not be able to pronounce concatenated words - this provides a better experience\n  pageup: 'page up',\n  pagedown: 'page down',\n  arrowup: 'up arrow',\n  arrowdown: 'down arrow',\n  arrowleft: 'left arrow',\n  arrowright: 'right arrow',\n  capslock: 'caps lock',\n  printscreen: 'print screen',\n  // We don't need to represent _every_ symbol - only those found on standard keyboards.\n  // Other symbols should be avoided as keyboard shortcuts anyway.\n  // These should match the colloqiual names of the keys, not the names of the symbols. Ie,\n  // \"Equals\" not \"Equal Sign\", \"Dash\" not \"Minus\", \"Period\" not \"Dot\", etc.\n  '`': 'backtick',\n  '~': 'tilde',\n  '!': 'exclamation point',\n  '@': 'at',\n  '#': 'hash',\n  $: 'dollar sign',\n  '%': 'percent',\n  '^': 'caret',\n  '&': 'ampersand',\n  '*': 'asterisk',\n  '(': 'left parenthesis',\n  ')': 'right parenthesis',\n  _: 'underscore',\n  '-': 'dash',\n  '+': 'plus',\n  '=': 'equals',\n  '[': 'left bracket',\n  '{': 'left curly brace',\n  ']': 'right bracket',\n  '}': 'right curly brace',\n  '\\\\': 'backslash',\n  '|': 'pipe',\n  ';': 'semicolon',\n  ':': 'colon',\n  \"'\": 'single quote',\n  '\"': 'double quote',\n  ',': 'comma',\n  '<': 'left angle bracket',\n  '.': 'period',\n  '>': 'right angle bracket',\n  '/': 'forward slash',\n  '?': 'question mark',\n  ' ': 'space',\n}\n\n/**\n * Consistent sort order for modifier keys. There should never be more than one non-modifier\n * key in a shortcut, so we don't need to worry about sorting those - we just put them at\n * the end.\n */\nconst keySortPriorities = {\n  control: 1,\n  meta: 2,\n  alt: 3,\n  option: 4,\n  shift: 5,\n  function: 6,\n  /** Maximum value for pushing other keys to end. */\n  DEFAULT: 7,\n} as const\n\nfunction isValidKeySortPriority(priority: string): priority is keyof typeof keySortPriorities {\n  return priority in keySortPriorities\n}\n\nfunction getKeySortPriorityValue(priority: string) {\n  if (isValidKeySortPriority(priority)) {\n    return keySortPriorities[priority]\n  }\n  return keySortPriorities.DEFAULT\n}\n\n/** `kbd` element with style resets. */\nconst Kbd = ({children}: {children: ReactNode}) => (\n  <Text\n    as=\"kbd\"\n    sx={{\n      color: 'inherit',\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      border: 'none',\n      background: 'none',\n      boxShadow: 'none',\n      p: 0,\n      lineHeight: 'unset',\n      position: 'relative',\n      overflow: 'visible',\n    }}\n  >\n    {children}\n  </Text>\n)\n\ninterface KeyProps {\n  name: string\n  format: KeyboardKeyFormat\n}\n\n/** A single key in a shortcut. */\nconst Key = ({name, format}: KeyProps) => (\n  // We represent each individual key as a <kbd> inside a single container <kbd> element.\n  // This requires a bit more styling to override the defaults but is the most semantic way\n  // to do it:\n  //\n  //  > To describe an input comprised of multiple keystrokes, you can nest multiple <kbd>\n  //  > elements, with an outer <kbd> element representing the overall input and each\n  //  > individual keystroke or component of the input enclosed within its own <kbd>.\n  //  > (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd#representing_keystrokes_within_an_input)\n  <>\n    <VisuallyHidden>{keyDescriptions[name] || name}</VisuallyHidden>\n    <span aria-hidden>{(format === 'condensed' ? condensedKeys[name] : fullKeys[name]) ?? capitalize(name)}</span>\n  </>\n)\n\nconst compareLowercaseKeys = (a: string, b: string) => getKeySortPriorityValue(a) - getKeySortPriorityValue(b)\n\nconst Chord = ({keys, format = 'condensed'}: KeyboardKeyProps) => (\n  <Text\n    sx={{\n      display: 'inline-flex',\n      bg: 'canvas.default',\n      color: 'fg.muted',\n      border: '1px solid',\n      borderColor: 'border.default',\n      borderRadius: 2,\n      fontWeight: 'normal',\n      fontFamily: 'normal',\n      fontSize: 0,\n      p: 1,\n      gap: '0.5ch',\n      boxShadow: 'none',\n      verticalAlign: 'baseline',\n      overflow: 'hidden',\n      lineHeight: '10px',\n    }}\n  >\n    {keys\n      .split('+')\n      .map(k => k.toLowerCase())\n      .sort(compareLowercaseKeys)\n      .map((k, i) => (\n        <Fragment key={i}>\n          {i > 0 && format === 'full' ? (\n            <span aria-hidden> + </span> // hiding the plus sign helps screen readers be more concise\n          ) : (\n            ' ' // space is nonvisual due to flex layout but critical for labelling / screen readers\n          )}\n\n          <Key name={k} format={format} />\n        </Fragment>\n      ))}\n  </Text>\n)\n\n/**\n * A consistent and accessible keyboard shortcut representation.\n */\n// KeyboardKey is a good candidate for memoizing since props will almost never change\nexport const KeyboardKey = memo(({keys, format = 'condensed'}: KeyboardKeyProps) => (\n  <Kbd>\n    {keys.split(' ').map((c, i) => (\n      <Fragment key={i}>\n        {\n          //  Since we audibly separate individual keys in chord with space, we need some other separator for chords in a sequence\n          i > 0 && (\n            <>\n              <VisuallyHidden>, then</VisuallyHidden>{' '}\n            </>\n          )\n        }\n        <Chord keys={c} format={format} />\n      </Fragment>\n    ))}\n  </Kbd>\n))\nKeyboardKey.displayName = 'KeyboardKey'\n\ntry{ Kbd.displayName ||= 'Kbd' } catch {}\ntry{ Chord.displayName ||= 'Chord' } catch {}","import {useState} from 'react'\nimport type {BrowserHistory, MemoryHistory} from '@remix-run/router'\nimport {Router} from 'react-router-dom'\n// eslint-disable-next-line no-restricted-imports\nimport {useHydratedEffect} from '@github-ui/use-hydrated-effect'\n\ntype Props = {\n  children: React.ReactNode\n  history: BrowserHistory | MemoryHistory\n}\n\nexport function PartialRouter({children, history}: Props) {\n  const [state, setState] = useState({\n    location: history.location,\n  })\n\n  useHydratedEffect(() => history.listen(setState), [history])\n\n  return (\n    <Router location={state.location} navigator={history}>\n      {children}\n    </Router>\n  )\n}\n\ntry{ PartialRouter.displayName ||= 'PartialRouter' } catch {}","// Think of this as the entry point into the framework\nimport React from 'react'\nimport type {EmbeddedPartialData} from './embedded-data-types'\nimport {BaseProviders} from './BaseProviders'\nimport type {BrowserHistory} from '@remix-run/router'\nimport {createMemoryHistory} from '@remix-run/router'\nimport {AppContextProvider} from './AppContextProvider'\nimport {PartialRouter} from './PartialRouter'\nimport {CommonElements} from './CommonElements'\nimport {createBrowserHistory} from './create-browser-history'\n\ninterface Props {\n  partialName: string\n  embeddedData: EmbeddedPartialData\n  Component: React.ComponentType\n  wasServerRendered: boolean\n  ssrError: boolean\n}\n\nexport function PartialEntry({partialName, embeddedData, Component, wasServerRendered, ssrError}: Props) {\n  // Create a ref to track the browser history:\n  const historyRef = React.useRef<BrowserHistory>()\n  const window = globalThis.window as Window | undefined\n\n  // For linking to work, we can just pass a dummy pathname here. We may consider plumbing the actual path in\n  if (!historyRef.current) {\n    historyRef.current = !window\n      ? createMemoryHistory({initialEntries: [{pathname: '/'}]})\n      : createBrowserHistory({window})\n  }\n  const history = historyRef.current\n\n  // Wrap the partial in an AppContextProvider and static Router so that react-core links\n  // will be functional.\n  return (\n    <BaseProviders appName={partialName} wasServerRendered={wasServerRendered}>\n      <AppContextProvider history={history} routes={[]}>\n        <PartialRouter history={history}>\n          <Component {...embeddedData.props} />\n          <CommonElements ssrError={ssrError} />\n        </PartialRouter>\n      </AppContextProvider>\n    </BaseProviders>\n  )\n}\n\ntry{ PartialEntry.displayName ||= 'PartialEntry' } catch {}","import styled from 'styled-components'\n\n/**\n * A component that hides children from being visible, but still accessible to screen readers. React equivalent to\n * the `sr-only` class.\n */\nexport const VisuallyHidden = styled.span`\n  border: 0;\n  clip: rect(0 0 0 0);\n  /* Elements without a height and width aren't accessible to screen readers\n  * however, the negative margin trick is used to hide the element by removing\n  * the same amount of margin as the height and width\n  * */\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n`\n"],"names":["env","getEnv","getLocale","locale","loadEnv","document","envTag","getElementById","JSON","parse","textContent","error","console","ready","ssrSafeDocument","readyState","Promise","resolve","addEventListener","loaded","ssrSafeWindow","getEnabledFeaturesSet","features","featureFlags","featuresUpperCase","map","feature","toUpperCase","Set","featuresSet","IS_SERVER","memoize","isFeatureEnabled","name","has","featureFlag","OS","Android","iOS","macOS","Windows","Linux","Unknown","isMacOS","getOS","os","isMobileOS","navigator","userAgent","platform","userAgentData","macosPlatforms","indexOf","iosPlatforms","windowsPlatforms","test","mobile","isAndroid","isIOS","isWindows","isLinux","isDesktop","isMobile","areCharacterKeyShortcutsEnabled","keyboardShortcutsPreference","querySelector","content","isNonCharacterKeyShortcut","hotkey","includes","nonEditableInputTypes","isShortcutAllowed","eventToHotkeyString","event","disallowCharKeyShortcutsBecauseEditable","isEditableElement","target","HTMLElement","nodeName","toLowerCase","type","getAttribute","isReadonly","ariaReadOnly","isContentEditable","allowCharacterKeyShortcuts","ScopedCommands","HintVisual","commands","services","jsonMetadata","serviceCommandIds","Object","keys","CommandId","is","str","getServiceId","commandId","split","getCommandMetadata","metadata","undefined","getServiceMetadata","serviceId","getKeybinding","defaultBinding","normalizeSequence","getKeybindings","Map","commandIds","id","filter","entry","CommandEvent","constructor","CommandEventHandlersMap","entries","client","AnalyticsClient","collectorUrl","CommandTriggerEvent","TYPE","send","context","sendEvent","recordCommandTriggerEvent","commandEvent","domEvent","command_id","trigger_type","KeyboardEvent","target_element_html","getOpeningHtmlTag","element","tagName","attributes","Array","from","attr","value","replaceAll","join","keybinding","registeredGlobalCommands","useDetectConflicts","scope","registeredScopedCommands","useMemo","registeredCommands","useEffect","alreadyRegisteredIds","get","length","warn","set","concat","remainingCommandIds","filterOnce","array","encounteredOnce","el","delete","useOnKeyDown","commandsIds","triggerCommand","sequenceTracker","SequenceTracker","keybindingMap","lastEventRef","useRef","useCallback","nativeEvent","current","reset","registerKeypress","sequence","preventDefault","stopPropagation","useRegisterCommands","sourceId","useId","customDomEventName","GlobalCommands","handler","onKeyDown","onCustomEvent","detail","MouseEvent","removeEventListener","displayName","CommandsContext","createContext","dispatchEvent","CustomEvent","CommandsContextProvider","Provider","useCommandsContext","useContext","children","commandsRef","useIsomorphicLayoutEffect","parentContext","contextValue","keyDownProps","useIgnoreKeyboardActionsWhileComposing","containerRef","div","style","display","ref","CommandKeybindingHint","props","KeyboardKey","CommandButton","forwardRef","trailingVisual","showKeybindingHint","forwardProps","Button","onClick","VisuallyHidden","format","CommandIconButton","ariaLabel","IconButton","aria-label","CommandActionListItem","description","leadingVisual","ActionList","Item","onSelect","Description","LeadingVisual","TrailingVisual","ShortcutsGroupList","group","service","serviceName","labelId","Box","sx","borderRadius","border","borderColor","overflow","as","bg","fontWeight","py","px","fontSize","role","aria-labelledby","listStyleType","borderTop","gap","justifyContent","alignItems","textAlign","isArray","i","Fragment","keyboardShortcuts","siteWideShortcuts","loading","LoadingState","height","Spinner","size","strings","parseShortcut","kb","Columns","flexDirection","flexWrap","Column","flex","ShortcutsDialog","visible","onVisibleChange","setSiteWideShortcuts","useState","shortcutGroups","setShortcutGroups","isLoading","setIsLoading","uiCommandGroups","getAllRegisteredCommands","uiCommandGroupMap","values","flat","command","push","fetchShortcuts","metaKeyboardShortcuts","options","contexts","url","URLSearchParams","toString","resp","verifiedFetchJSON","method","ok","shortcuts","json","global","rest","find","uiCommandGroup","transformedGroups","Dialog","title","aria-modal","width","onClose","color","href","KeyboardShortcutsDialog","isVisible","setVisible","registerReactPartial","Component","partialRegistry","DeferredRegistry","ReactPartialElement","ReactBaseElement","getReactNode","embeddedData","appName","getRegistration","PartialEntry","partialName","wasServerRendered","hasSSRContent","ssrError","Boolean","nameAttribute","registration","register","controller","runtimeEnvironment","head","isPrivateInstance","isEnterprise","bundler","BUNDLER","NoOpStorage","getItem","setItem","removeItem","clear","key","safeStorage","storageKey","throwQuotaErrorsOnSet","deserialize","serialize","storage","emitStats","sendCacheStats","sendStats","incrementKey","ttl","expiryKey","now","Date","getTime","expiry","Number","Error","message","jsonSafeStorage","storageBackend","window","stringify","ssrSafeHistory","history","ssrSafeLocation","location","pathname","origin","search","hash","IS_BROWSER","stats","stat","flushImmediately","samplingProbability","timestamp","loggedIn","staff","isStaff","Math","random","flushStats","scheduleSendStats","queued","requestIdleCallback","batches","getBatches","items","itemStrings","item","makeBatch","firstItem","shift","batch","nextItemSize","itemString","safeSend","data","sendBeacon","ignoredKeysLowercase","isComposingRef","hasCompositionEndedRef","handleComposition","wrappedOnKeyDown","keyCode","inputProps","onCompositionStart","onCompositionEnd","verifiedFetch","path","init","match","headers","fetch","initHeaders","Accept","body","condensedKeys","alt","control","meta","mod","pageup","pagedown","arrowup","arrowdown","arrowleft","arrowright","plus","backspace","space","tab","enter","escape","function","capslock","insert","printscreen","fullKeys","keyDescriptions","$","_","keySortPriorities","option","DEFAULT","getKeySortPriorityValue","priority","Kbd","Text","fontFamily","background","boxShadow","p","lineHeight","position","Key","span","aria-hidden","capitalize","compareLowercaseKeys","a","b","Chord","verticalAlign","k","sort","memo","c","PartialRouter","state","setState","useHydratedEffect","listen","Router","historyRef","React","globalThis","createBrowserHistory","createMemoryHistory","initialEntries","BaseProviders","AppContextProvider","routes","CommonElements","styled"],"sourceRoot":""}